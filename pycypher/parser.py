# Generated from Cypher.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0099")
        buf.write("\u0872\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\3\2\5\2\u0120\n\2\3\2\3\2\3\2\5\2\u0125")
        buf.write("\n\2\3\2\5\2\u0128\n\2\3\2\5\2\u012b\n\2\3\2\3\2\3\3\3")
        buf.write("\3\5\3\u0131\n\3\7\3\u0133\n\3\f\3\16\3\u0136\13\3\3\4")
        buf.write("\3\4\3\4\5\4\u013b\n\4\3\5\3\5\3\5\5\5\u0140\n\5\3\5\3")
        buf.write("\5\7\5\u0144\n\5\f\5\16\5\u0147\13\5\3\6\3\6\3\7\3\7\3")
        buf.write("\b\3\b\3\t\3\t\5\t\u0151\n\t\3\t\3\t\5\t\u0155\n\t\3\t")
        buf.write("\3\t\3\n\3\n\5\n\u015b\n\n\3\13\3\13\3\13\5\13\u0160\n")
        buf.write("\13\3\f\3\f\5\f\u0164\n\f\3\f\7\f\u0167\n\f\f\f\16\f\u016a")
        buf.write("\13\f\3\r\3\r\5\r\u016e\n\r\3\r\3\r\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\5\16\u0179\n\16\3\17\3\17\3\17\3\20\3")
        buf.write("\20\3\20\3\20\5\20\u0182\n\20\3\20\3\20\3\20\5\20\u0187")
        buf.write("\n\20\3\20\5\20\u018a\n\20\3\21\3\21\5\21\u018e\n\21\3")
        buf.write("\22\3\22\5\22\u0192\n\22\7\22\u0194\n\22\f\22\16\22\u0197")
        buf.write("\13\22\3\22\3\22\3\22\5\22\u019c\n\22\7\22\u019e\n\22")
        buf.write("\f\22\16\22\u01a1\13\22\3\22\3\22\5\22\u01a5\n\22\3\22")
        buf.write("\7\22\u01a8\n\22\f\22\16\22\u01ab\13\22\3\22\5\22\u01ae")
        buf.write("\n\22\3\22\5\22\u01b1\n\22\5\22\u01b3\n\22\3\23\3\23\5")
        buf.write("\23\u01b7\n\23\7\23\u01b9\n\23\f\23\16\23\u01bc\13\23")
        buf.write("\3\23\3\23\5\23\u01c0\n\23\7\23\u01c2\n\23\f\23\16\23")
        buf.write("\u01c5\13\23\3\23\3\23\5\23\u01c9\n\23\6\23\u01cb\n\23")
        buf.write("\r\23\16\23\u01cc\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\5\24\u01d8\n\24\3\25\3\25\3\25\3\25\3\25\5\25")
        buf.write("\u01df\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5")
        buf.write("\26\u01e9\n\26\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30")
        buf.write("\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33")
        buf.write("\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36")
        buf.write("\3\36\3\36\3\37\3\37\3\37\3\37\5\37\u020f\n\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3 \3 \3 \3 \5 \u021a\n \3 \3 \3 \3")
        buf.write(" \3 \5 \u0221\n \3 \3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\5")
        buf.write("!\u022f\n!\3!\3!\3!\3!\3!\5!\u0236\n!\3!\3!\3!\3!\5!\u023c")
        buf.write("\n!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\5\"\u0246\n\"\3\"\3\"")
        buf.write("\5\"\u024a\n\"\3\"\3\"\3\"\3\"\5\"\u0250\n\"\3\"\3\"\3")
        buf.write("\"\3\"\3#\3#\5#\u0258\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5")
        buf.write("#\u0263\n#\3#\3#\3#\3#\5#\u0269\n#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\5#\u0275\n#\3#\3#\3#\3#\5#\u027b\n#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\5#\u0287\n#\3#\3#\5#\u028b\n#\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\5$\u0295\n$\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\5$\u02a2\n$\3%\3%\5%\u02a6\n%\3%\3%\5%\u02aa")
        buf.write("\n%\3%\3%\7%\u02ae\n%\f%\16%\u02b1\13%\3%\5%\u02b4\n%")
        buf.write("\3%\5%\u02b7\n%\3&\3&\5&\u02bb\n&\3&\3&\3&\3&\3&\3&\3")
        buf.write("\'\3\'\5\'\u02c5\n\'\3\'\3\'\3\'\7\'\u02ca\n\'\f\'\16")
        buf.write("\'\u02cd\13\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u02d9\n")
        buf.write("(\3)\3)\5)\u02dd\n)\3)\3)\3*\3*\3*\3*\5*\u02e5\n*\3*\3")
        buf.write("*\3+\3+\5+\u02eb\n+\3+\3+\3+\7+\u02f0\n+\f+\16+\u02f3")
        buf.write("\13+\3,\3,\5,\u02f7\n,\3,\3,\5,\u02fb\n,\3,\3,\3,\3,\5")
        buf.write(",\u0301\n,\3,\3,\5,\u0305\n,\3,\3,\3,\3,\5,\u030b\n,\3")
        buf.write(",\3,\5,\u030f\n,\3,\3,\3,\3,\5,\u0315\n,\3,\3,\5,\u0319")
        buf.write("\n,\3-\3-\5-\u031d\n-\3-\3-\5-\u0321\n-\3-\3-\5-\u0325")
        buf.write("\n-\3-\3-\5-\u0329\n-\3-\7-\u032c\n-\f-\16-\u032f\13-")
        buf.write("\3.\3.\3.\3.\5.\u0335\n.\3.\3.\5.\u0339\n.\3.\7.\u033c")
        buf.write("\n.\f.\16.\u033f\13.\3/\3/\3/\3/\5/\u0345\n/\3\60\3\60")
        buf.write("\5\60\u0349\n\60\3\60\3\60\5\60\u034d\n\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\5\60\u0355\n\60\3\60\3\60\3\60\6\60")
        buf.write("\u035a\n\60\r\60\16\60\u035b\3\60\5\60\u035f\n\60\3\60")
        buf.write("\3\60\3\61\3\61\3\61\3\61\5\61\u0367\n\61\3\61\3\61\3")
        buf.write("\61\5\61\u036c\n\61\3\62\3\62\3\62\3\62\5\62\u0372\n\62")
        buf.write("\3\62\3\62\3\62\3\62\5\62\u0378\n\62\3\63\3\63\5\63\u037c")
        buf.write("\n\63\3\63\3\63\5\63\u0380\n\63\3\63\7\63\u0383\n\63\f")
        buf.write("\63\16\63\u0386\13\63\3\63\5\63\u0389\n\63\3\64\3\64\3")
        buf.write("\64\3\64\3\64\5\64\u0390\n\64\3\64\3\64\3\65\3\65\5\65")
        buf.write("\u0396\n\65\3\65\5\65\u0399\n\65\3\65\3\65\3\65\5\65\u039e")
        buf.write("\n\65\3\65\5\65\u03a1\n\65\3\66\3\66\5\66\u03a5\n\66\3")
        buf.write("\66\5\66\u03a8\n\66\3\66\3\66\3\66\3\67\3\67\3\67\5\67")
        buf.write("\u03b0\n\67\3\67\3\67\5\67\u03b4\n\67\3\67\3\67\5\67\u03b8")
        buf.write("\n\67\38\38\58\u03bc\n8\38\38\58\u03c0\n8\38\78\u03c3")
        buf.write("\n8\f8\168\u03c6\138\38\38\58\u03ca\n8\38\38\58\u03ce")
        buf.write("\n8\38\78\u03d1\n8\f8\168\u03d4\138\58\u03d6\n8\39\39")
        buf.write("\39\39\39\39\39\59\u03df\n9\3:\3:\3:\3:\3:\3:\3:\5:\u03e8")
        buf.write("\n:\3:\7:\u03eb\n:\f:\16:\u03ee\13:\3;\3;\3;\3;\3<\3<")
        buf.write("\3<\3<\3=\3=\5=\u03fa\n=\3=\5=\u03fd\n=\3>\5>\u0400\n")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\5>\u0414\n>\3>\3>\5>\u0418\n>\3>\7>\u041b\n>\f>\16>")
        buf.write("\u041e\13>\3>\3>\3>\3>\3>\3>\3>\5>\u0427\n>\3?\3?\3?\3")
        buf.write("?\5?\u042d\n?\3?\3?\5?\u0431\n?\3?\7?\u0434\n?\f?\16?")
        buf.write("\u0437\13?\3?\5?\u043a\n?\3@\3@\5@\u043e\n@\3@\3@\5@\u0442")
        buf.write("\n@\3@\3@\3A\3A\5A\u0448\nA\3B\3B\5B\u044c\nB\3B\3B\3")
        buf.write("B\5B\u0451\nB\3C\3C\3C\3C\5C\u0457\nC\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\5D\u0460\nD\3D\3D\3E\3E\3E\3E\3E\5E\u0469\nE\3E\3")
        buf.write("E\3F\3F\3F\3F\5F\u0471\nF\3F\3F\3G\3G\5G\u0477\nG\3G\3")
        buf.write("G\5G\u047b\nG\3G\7G\u047e\nG\fG\16G\u0481\13G\3H\3H\3")
        buf.write("H\3H\3I\3I\5I\u0489\nI\3I\3I\5I\u048d\nI\3I\7I\u0490\n")
        buf.write("I\fI\16I\u0493\13I\3J\3J\5J\u0497\nJ\3J\3J\5J\u049b\n")
        buf.write("J\3J\3J\3J\5J\u04a0\nJ\3K\3K\5K\u04a4\nK\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\3L\5L\u04b0\nL\3M\3M\5M\u04b4\nM\3M\7M\u04b7")
        buf.write("\nM\fM\16M\u04ba\13M\3M\3M\3M\3M\5M\u04c0\nM\3N\3N\5N")
        buf.write("\u04c4\nN\3N\3N\5N\u04c8\nN\5N\u04ca\nN\3N\3N\5N\u04ce")
        buf.write("\nN\5N\u04d0\nN\3N\3N\5N\u04d4\nN\5N\u04d6\nN\3N\3N\3")
        buf.write("O\3O\5O\u04dc\nO\3O\3O\3P\3P\5P\u04e2\nP\3P\3P\5P\u04e6")
        buf.write("\nP\3P\5P\u04e9\nP\3P\5P\u04ec\nP\3P\3P\5P\u04f0\nP\3")
        buf.write("P\3P\3P\3P\5P\u04f6\nP\3P\3P\5P\u04fa\nP\3P\5P\u04fd\n")
        buf.write("P\3P\5P\u0500\nP\3P\3P\3P\3P\5P\u0506\nP\3P\5P\u0509\n")
        buf.write("P\3P\5P\u050c\nP\3P\3P\5P\u0510\nP\3P\3P\3P\3P\5P\u0516")
        buf.write("\nP\3P\5P\u0519\nP\3P\5P\u051c\nP\3P\3P\5P\u0520\nP\3")
        buf.write("Q\3Q\5Q\u0524\nQ\3Q\3Q\5Q\u0528\nQ\5Q\u052a\nQ\3Q\3Q\5")
        buf.write("Q\u052e\nQ\5Q\u0530\nQ\3Q\5Q\u0533\nQ\3Q\3Q\5Q\u0537\n")
        buf.write("Q\5Q\u0539\nQ\3Q\3Q\3R\3R\3R\5R\u0540\nR\3S\3S\5S\u0544")
        buf.write("\nS\3S\3S\3T\3T\5T\u054a\nT\3T\3T\5T\u054e\nT\3T\3T\5")
        buf.write("T\u0552\nT\3T\5T\u0555\nT\3T\7T\u0558\nT\fT\16T\u055b")
        buf.write("\13T\3U\3U\5U\u055f\nU\3U\7U\u0562\nU\fU\16U\u0565\13")
        buf.write("U\3V\3V\5V\u0569\nV\3V\3V\3W\3W\5W\u056f\nW\3W\3W\5W\u0573")
        buf.write("\nW\5W\u0575\nW\3W\3W\5W\u0579\nW\3W\3W\5W\u057d\nW\5")
        buf.write("W\u057f\nW\5W\u0581\nW\3X\3X\3Y\3Y\3Z\3Z\3[\3[\3[\3[\3")
        buf.write("[\7[\u058e\n[\f[\16[\u0591\13[\3\\\3\\\3\\\3\\\3\\\7\\")
        buf.write("\u0598\n\\\f\\\16\\\u059b\13\\\3]\3]\3]\3]\3]\7]\u05a2")
        buf.write("\n]\f]\16]\u05a5\13]\3^\3^\5^\u05a9\n^\7^\u05ab\n^\f^")
        buf.write("\16^\u05ae\13^\3^\3^\3_\3_\5_\u05b4\n_\3_\7_\u05b7\n_")
        buf.write("\f_\16_\u05ba\13_\3`\3`\5`\u05be\n`\3`\3`\5`\u05c2\n`")
        buf.write("\3`\3`\5`\u05c6\n`\3`\3`\5`\u05ca\n`\3`\7`\u05cd\n`\f")
        buf.write("`\16`\u05d0\13`\3a\3a\5a\u05d4\na\3a\3a\5a\u05d8\na\3")
        buf.write("a\3a\5a\u05dc\na\3a\3a\5a\u05e0\na\3a\3a\5a\u05e4\na\3")
        buf.write("a\3a\5a\u05e8\na\3a\7a\u05eb\na\fa\16a\u05ee\13a\3b\3")
        buf.write("b\5b\u05f2\nb\3b\3b\5b\u05f6\nb\3b\7b\u05f9\nb\fb\16b")
        buf.write("\u05fc\13b\3c\3c\5c\u0600\nc\7c\u0602\nc\fc\16c\u0605")
        buf.write("\13c\3c\3c\3d\3d\3d\3d\7d\u060d\nd\fd\16d\u0610\13d\3")
        buf.write("e\3e\3e\5e\u0615\ne\3e\3e\5e\u0619\ne\3e\3e\3e\3e\3e\5")
        buf.write("e\u0620\ne\3e\3e\5e\u0624\ne\3e\3e\5e\u0628\ne\3e\5e\u062b")
        buf.write("\ne\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0638\nf\3f\5")
        buf.write("f\u063b\nf\3f\3f\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u0649")
        buf.write("\ng\3h\5h\u064c\nh\3h\3h\3i\3i\5i\u0652\ni\3i\7i\u0655")
        buf.write("\ni\fi\16i\u0658\13i\3i\5i\u065b\ni\3i\5i\u065e\ni\3j")
        buf.write("\3j\3j\3j\3j\3j\5j\u0666\nj\3j\3j\5j\u066a\nj\3j\3j\5")
        buf.write("j\u066e\nj\3j\3j\3j\3j\3j\3j\3j\5j\u0677\nj\3j\3j\5j\u067b")
        buf.write("\nj\3j\3j\5j\u067f\nj\3j\3j\3j\3j\5j\u0685\nj\3j\3j\5")
        buf.write("j\u0689\nj\3j\3j\5j\u068d\nj\3j\3j\3j\3j\5j\u0693\nj\3")
        buf.write("j\3j\5j\u0697\nj\3j\3j\5j\u069b\nj\3j\3j\3j\3j\5j\u06a1")
        buf.write("\nj\3j\3j\5j\u06a5\nj\3j\3j\5j\u06a9\nj\3j\3j\3j\3j\3")
        buf.write("j\3j\3j\5j\u06b2\nj\3k\3k\3k\3k\3k\3k\5k\u06ba\nk\3l\3")
        buf.write("l\3m\3m\5m\u06c0\nm\3m\3m\5m\u06c4\nm\3m\3m\5m\u06c8\n")
        buf.write("m\3m\3m\5m\u06cc\nm\7m\u06ce\nm\fm\16m\u06d1\13m\5m\u06d3")
        buf.write("\nm\3m\3m\3n\3n\5n\u06d9\nn\3n\3n\3n\3n\3n\3n\3n\3n\3")
        buf.write("n\3n\3o\3o\5o\u06e7\no\3o\3o\3o\5o\u06ec\no\3o\3o\3o\5")
        buf.write("o\u06f1\no\3o\3o\3o\5o\u06f6\no\3o\3o\3o\5o\u06fb\no\3")
        buf.write("o\3o\3o\5o\u0700\no\3o\5o\u0703\no\3p\3p\5p\u0707\np\3")
        buf.write("p\3p\5p\u070b\np\3p\3p\3q\3q\5q\u0711\nq\3q\6q\u0714\n")
        buf.write("q\rq\16q\u0715\3r\3r\5r\u071a\nr\3r\5r\u071d\nr\3s\3s")
        buf.write("\5s\u0721\ns\3s\3s\5s\u0725\ns\3s\3s\5s\u0729\ns\3s\3")
        buf.write("s\3s\3s\5s\u072f\ns\3s\3s\5s\u0733\ns\3s\3s\5s\u0737\n")
        buf.write("s\3s\5s\u073a\ns\3s\3s\5s\u073e\ns\3s\3s\5s\u0742\ns\3")
        buf.write("t\3t\3t\3t\3t\3t\3u\3u\5u\u074c\nu\3u\3u\5u\u0750\nu\3")
        buf.write("u\3u\5u\u0754\nu\5u\u0756\nu\3u\3u\5u\u075a\nu\3u\3u\5")
        buf.write("u\u075e\nu\3u\3u\5u\u0762\nu\7u\u0764\nu\fu\16u\u0767")
        buf.write("\13u\5u\u0769\nu\3u\3u\3v\3v\3v\3v\5v\u0771\nv\3w\3w\5")
        buf.write("w\u0775\nw\3w\3w\5w\u0779\nw\3w\3w\5w\u077d\nw\3w\3w\5")
        buf.write("w\u0781\nw\3w\3w\5w\u0785\nw\7w\u0787\nw\fw\16w\u078a")
        buf.write("\13w\5w\u078c\nw\3w\3w\3x\3x\3y\3y\3z\3z\3z\3{\3{\3{\7")
        buf.write("{\u079a\n{\f{\16{\u079d\13{\3|\3|\5|\u07a1\n|\3|\3|\5")
        buf.write("|\u07a5\n|\3|\3|\5|\u07a9\n|\3|\5|\u07ac\n|\3|\5|\u07af")
        buf.write("\n|\3|\3|\3}\3}\5}\u07b5\n}\3}\3}\5}\u07b9\n}\3}\3}\5")
        buf.write("}\u07bd\n}\5}\u07bf\n}\3}\3}\5}\u07c3\n}\3}\3}\5}\u07c7")
        buf.write("\n}\3}\3}\5}\u07cb\n}\5}\u07cd\n}\3}\3}\5}\u07d1\n}\3")
        buf.write("}\3}\5}\u07d5\n}\3}\3}\3~\3~\5~\u07db\n~\3~\3~\3\177\3")
        buf.write("\177\5\177\u07e1\n\177\3\177\6\177\u07e4\n\177\r\177\16")
        buf.write("\177\u07e5\3\177\3\177\5\177\u07ea\n\177\3\177\3\177\5")
        buf.write("\177\u07ee\n\177\3\177\6\177\u07f1\n\177\r\177\16\177")
        buf.write("\u07f2\5\177\u07f5\n\177\3\177\5\177\u07f8\n\177\3\177")
        buf.write("\3\177\5\177\u07fc\n\177\3\177\5\177\u07ff\n\177\3\177")
        buf.write("\5\177\u0802\n\177\3\177\3\177\3\u0080\3\u0080\5\u0080")
        buf.write("\u0808\n\u0080\3\u0080\3\u0080\5\u0080\u080c\n\u0080\3")
        buf.write("\u0080\3\u0080\5\u0080\u0810\n\u0080\3\u0080\3\u0080\3")
        buf.write("\u0081\3\u0081\3\u0082\3\u0082\5\u0082\u0818\n\u0082\3")
        buf.write("\u0083\3\u0083\5\u0083\u081c\n\u0083\3\u0083\3\u0083\5")
        buf.write("\u0083\u0820\n\u0083\3\u0083\3\u0083\5\u0083\u0824\n\u0083")
        buf.write("\3\u0083\3\u0083\5\u0083\u0828\n\u0083\3\u0083\3\u0083")
        buf.write("\5\u0083\u082c\n\u0083\3\u0083\3\u0083\5\u0083\u0830\n")
        buf.write("\u0083\3\u0083\3\u0083\5\u0083\u0834\n\u0083\3\u0083\3")
        buf.write("\u0083\5\u0083\u0838\n\u0083\7\u0083\u083a\n\u0083\f\u0083")
        buf.write("\16\u0083\u083d\13\u0083\5\u0083\u083f\n\u0083\3\u0083")
        buf.write("\3\u0083\3\u0084\3\u0084\5\u0084\u0845\n\u0084\3\u0084")
        buf.write("\3\u0084\5\u0084\u0849\n\u0084\3\u0084\5\u0084\u084c\n")
        buf.write("\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\5\u0085")
        buf.write("\u0853\n\u0085\3\u0086\3\u0086\5\u0086\u0857\n\u0086\3")
        buf.write("\u0086\6\u0086\u085a\n\u0086\r\u0086\16\u0086\u085b\3")
        buf.write("\u0087\3\u0087\3\u0088\3\u0088\3\u0089\3\u0089\3\u008a")
        buf.write("\3\u008a\5\u008a\u0866\n\u008a\3\u008b\3\u008b\3\u008c")
        buf.write("\3\u008c\3\u008d\3\u008d\3\u008e\3\u008e\3\u008f\3\u008f")
        buf.write("\3\u008f\2\2\u0090\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6")
        buf.write("\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8")
        buf.write("\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa")
        buf.write("\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c")
        buf.write("\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\2\r\3")
        buf.write("\2[^\3\2cd\4\2\f\f\20\20\3\2tu\3\2\u0080\u0082\3\2\u008a")
        buf.write("\u008b\17\2\67:<=?ADDGGIPRRU^eehotuy}\u008c\u0092\7\2")
        buf.write("pswx\u0083\u0083\u0093\u0093\u0096\u0096\4\2\26\26\36")
        buf.write("!\4\2\27\27\"%\4\2\f\f&\60\2\u097f\2\u011f\3\2\2\2\4\u0134")
        buf.write("\3\2\2\2\6\u013a\3\2\2\2\b\u013c\3\2\2\2\n\u0148\3\2\2")
        buf.write("\2\f\u014a\3\2\2\2\16\u014c\3\2\2\2\20\u014e\3\2\2\2\22")
        buf.write("\u015a\3\2\2\2\24\u015f\3\2\2\2\26\u0161\3\2\2\2\30\u016b")
        buf.write("\3\2\2\2\32\u0171\3\2\2\2\34\u017a\3\2\2\2\36\u0189\3")
        buf.write("\2\2\2 \u018d\3\2\2\2\"\u01b2\3\2\2\2$\u01ca\3\2\2\2&")
        buf.write("\u01d7\3\2\2\2(\u01de\3\2\2\2*\u01e8\3\2\2\2,\u01ea\3")
        buf.write("\2\2\2.\u01ee\3\2\2\2\60\u01f2\3\2\2\2\62\u01f6\3\2\2")
        buf.write("\2\64\u01fa\3\2\2\2\66\u01fe\3\2\2\28\u0202\3\2\2\2:\u0206")
        buf.write("\3\2\2\2<\u020a\3\2\2\2>\u0215\3\2\2\2@\u022a\3\2\2\2")
        buf.write("B\u0241\3\2\2\2D\u028a\3\2\2\2F\u028c\3\2\2\2H\u02a5\3")
        buf.write("\2\2\2J\u02b8\3\2\2\2L\u02c2\3\2\2\2N\u02d8\3\2\2\2P\u02da")
        buf.write("\3\2\2\2R\u02e0\3\2\2\2T\u02e8\3\2\2\2V\u0318\3\2\2\2")
        buf.write("X\u031c\3\2\2\2Z\u0330\3\2\2\2\\\u0344\3\2\2\2^\u0346")
        buf.write("\3\2\2\2`\u0362\3\2\2\2b\u036d\3\2\2\2d\u0388\3\2\2\2")
        buf.write("f\u038f\3\2\2\2h\u0393\3\2\2\2j\u03a2\3\2\2\2l\u03ac\3")
        buf.write("\2\2\2n\u03d5\3\2\2\2p\u03de\3\2\2\2r\u03e0\3\2\2\2t\u03ef")
        buf.write("\3\2\2\2v\u03f3\3\2\2\2x\u03f7\3\2\2\2z\u03ff\3\2\2\2")
        buf.write("|\u0428\3\2\2\2~\u043b\3\2\2\2\u0080\u0447\3\2\2\2\u0082")
        buf.write("\u0449\3\2\2\2\u0084\u0452\3\2\2\2\u0086\u0458\3\2\2\2")
        buf.write("\u0088\u0463\3\2\2\2\u008a\u046c\3\2\2\2\u008c\u0474\3")
        buf.write("\2\2\2\u008e\u0482\3\2\2\2\u0090\u0486\3\2\2\2\u0092\u049f")
        buf.write("\3\2\2\2\u0094\u04a3\3\2\2\2\u0096\u04af\3\2\2\2\u0098")
        buf.write("\u04bf\3\2\2\2\u009a\u04c1\3\2\2\2\u009c\u04d9\3\2\2\2")
        buf.write("\u009e\u051f\3\2\2\2\u00a0\u0521\3\2\2\2\u00a2\u053f\3")
        buf.write("\2\2\2\u00a4\u0541\3\2\2\2\u00a6\u0547\3\2\2\2\u00a8\u055c")
        buf.write("\3\2\2\2\u00aa\u0566\3\2\2\2\u00ac\u056c\3\2\2\2\u00ae")
        buf.write("\u0582\3\2\2\2\u00b0\u0584\3\2\2\2\u00b2\u0586\3\2\2\2")
        buf.write("\u00b4\u0588\3\2\2\2\u00b6\u0592\3\2\2\2\u00b8\u059c\3")
        buf.write("\2\2\2\u00ba\u05ac\3\2\2\2\u00bc\u05b1\3\2\2\2\u00be\u05bb")
        buf.write("\3\2\2\2\u00c0\u05d1\3\2\2\2\u00c2\u05ef\3\2\2\2\u00c4")
        buf.write("\u0603\3\2\2\2\u00c6\u0608\3\2\2\2\u00c8\u062a\3\2\2\2")
        buf.write("\u00ca\u0637\3\2\2\2\u00cc\u0648\3\2\2\2\u00ce\u064b\3")
        buf.write("\2\2\2\u00d0\u064f\3\2\2\2\u00d2\u06b1\3\2\2\2\u00d4\u06b9")
        buf.write("\3\2\2\2\u00d6\u06bb\3\2\2\2\u00d8\u06bd\3\2\2\2\u00da")
        buf.write("\u06d6\3\2\2\2\u00dc\u0702\3\2\2\2\u00de\u0704\3\2\2\2")
        buf.write("\u00e0\u070e\3\2\2\2\u00e2\u0717\3\2\2\2\u00e4\u0741\3")
        buf.write("\2\2\2\u00e6\u0743\3\2\2\2\u00e8\u0749\3\2\2\2\u00ea\u0770")
        buf.write("\3\2\2\2\u00ec\u0772\3\2\2\2\u00ee\u078f\3\2\2\2\u00f0")
        buf.write("\u0791\3\2\2\2\u00f2\u0793\3\2\2\2\u00f4\u079b\3\2\2\2")
        buf.write("\u00f6\u079e\3\2\2\2\u00f8\u07b2\3\2\2\2\u00fa\u07d8\3")
        buf.write("\2\2\2\u00fc\u07f4\3\2\2\2\u00fe\u0805\3\2\2\2\u0100\u0813")
        buf.write("\3\2\2\2\u0102\u0817\3\2\2\2\u0104\u0819\3\2\2\2\u0106")
        buf.write("\u0842\3\2\2\2\u0108\u084f\3\2\2\2\u010a\u0854\3\2\2\2")
        buf.write("\u010c\u085d\3\2\2\2\u010e\u085f\3\2\2\2\u0110\u0861\3")
        buf.write("\2\2\2\u0112\u0865\3\2\2\2\u0114\u0867\3\2\2\2\u0116\u0869")
        buf.write("\3\2\2\2\u0118\u086b\3\2\2\2\u011a\u086d\3\2\2\2\u011c")
        buf.write("\u086f\3\2\2\2\u011e\u0120\7\u0097\2\2\u011f\u011e\3\2")
        buf.write("\2\2\u011f\u0120\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0122")
        buf.write("\5\4\3\2\u0122\u0127\5\22\n\2\u0123\u0125\7\u0097\2\2")
        buf.write("\u0124\u0123\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0126\3")
        buf.write("\2\2\2\u0126\u0128\7\3\2\2\u0127\u0124\3\2\2\2\u0127\u0128")
        buf.write("\3\2\2\2\u0128\u012a\3\2\2\2\u0129\u012b\7\u0097\2\2\u012a")
        buf.write("\u0129\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012c\3\2\2\2")
        buf.write("\u012c\u012d\7\2\2\3\u012d\3\3\2\2\2\u012e\u0130\5\6\4")
        buf.write("\2\u012f\u0131\7\u0097\2\2\u0130\u012f\3\2\2\2\u0130\u0131")
        buf.write("\3\2\2\2\u0131\u0133\3\2\2\2\u0132\u012e\3\2\2\2\u0133")
        buf.write("\u0136\3\2\2\2\u0134\u0132\3\2\2\2\u0134\u0135\3\2\2\2")
        buf.write("\u0135\5\3\2\2\2\u0136\u0134\3\2\2\2\u0137\u013b\5\b\5")
        buf.write("\2\u0138\u013b\5\f\7\2\u0139\u013b\5\16\b\2\u013a\u0137")
        buf.write("\3\2\2\2\u013a\u0138\3\2\2\2\u013a\u0139\3\2\2\2\u013b")
        buf.write("\7\3\2\2\2\u013c\u013f\7\61\2\2\u013d\u013e\7\u0097\2")
        buf.write("\2\u013e\u0140\5\n\6\2\u013f\u013d\3\2\2\2\u013f\u0140")
        buf.write("\3\2\2\2\u0140\u0145\3\2\2\2\u0141\u0142\7\u0097\2\2\u0142")
        buf.write("\u0144\5\20\t\2\u0143\u0141\3\2\2\2\u0144\u0147\3\2\2")
        buf.write("\2\u0145\u0143\3\2\2\2\u0145\u0146\3\2\2\2\u0146\t\3\2")
        buf.write("\2\2\u0147\u0145\3\2\2\2\u0148\u0149\7\u008b\2\2\u0149")
        buf.write("\13\3\2\2\2\u014a\u014b\7\62\2\2\u014b\r\3\2\2\2\u014c")
        buf.write("\u014d\7\63\2\2\u014d\17\3\2\2\2\u014e\u0150\5\u0116\u008c")
        buf.write("\2\u014f\u0151\7\u0097\2\2\u0150\u014f\3\2\2\2\u0150\u0151")
        buf.write("\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0154\7\4\2\2\u0153")
        buf.write("\u0155\7\u0097\2\2\u0154\u0153\3\2\2\2\u0154\u0155\3\2")
        buf.write("\2\2\u0155\u0156\3\2\2\2\u0156\u0157\5\u0116\u008c\2\u0157")
        buf.write("\21\3\2\2\2\u0158\u015b\5*\26\2\u0159\u015b\5\24\13\2")
        buf.write("\u015a\u0158\3\2\2\2\u015a\u0159\3\2\2\2\u015b\23\3\2")
        buf.write("\2\2\u015c\u0160\5\26\f\2\u015d\u0160\5b\62\2\u015e\u0160")
        buf.write("\5\30\r\2\u015f\u015c\3\2\2\2\u015f\u015d\3\2\2\2\u015f")
        buf.write("\u015e\3\2\2\2\u0160\25\3\2\2\2\u0161\u0168\5 \21\2\u0162")
        buf.write("\u0164\7\u0097\2\2\u0163\u0162\3\2\2\2\u0163\u0164\3\2")
        buf.write("\2\2\u0164\u0165\3\2\2\2\u0165\u0167\5\36\20\2\u0166\u0163")
        buf.write("\3\2\2\2\u0167\u016a\3\2\2\2\u0168\u0166\3\2\2\2\u0168")
        buf.write("\u0169\3\2\2\2\u0169\27\3\2\2\2\u016a\u0168\3\2\2\2\u016b")
        buf.write("\u016d\5\32\16\2\u016c\u016e\7\u0097\2\2\u016d\u016c\3")
        buf.write("\2\2\2\u016d\u016e\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u0170")
        buf.write("\5\34\17\2\u0170\31\3\2\2\2\u0171\u0172\7\64\2\2\u0172")
        buf.write("\u0173\7\u0097\2\2\u0173\u0174\7\65\2\2\u0174\u0175\7")
        buf.write("\u0097\2\2\u0175\u0178\7\66\2\2\u0176\u0177\7\u0097\2")
        buf.write("\2\u0177\u0179\5\u010e\u0088\2\u0178\u0176\3\2\2\2\u0178")
        buf.write("\u0179\3\2\2\2\u0179\33\3\2\2\2\u017a\u017b\5F$\2\u017b")
        buf.write("\u017c\5 \21\2\u017c\35\3\2\2\2\u017d\u017e\7\67\2\2\u017e")
        buf.write("\u017f\7\u0097\2\2\u017f\u0181\78\2\2\u0180\u0182\7\u0097")
        buf.write("\2\2\u0181\u0180\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0183")
        buf.write("\3\2\2\2\u0183\u018a\5 \21\2\u0184\u0186\7\67\2\2\u0185")
        buf.write("\u0187\7\u0097\2\2\u0186\u0185\3\2\2\2\u0186\u0187\3\2")
        buf.write("\2\2\u0187\u0188\3\2\2\2\u0188\u018a\5 \21\2\u0189\u017d")
        buf.write("\3\2\2\2\u0189\u0184\3\2\2\2\u018a\37\3\2\2\2\u018b\u018e")
        buf.write("\5\"\22\2\u018c\u018e\5$\23\2\u018d\u018b\3\2\2\2\u018d")
        buf.write("\u018c\3\2\2\2\u018e!\3\2\2\2\u018f\u0191\5(\25\2\u0190")
        buf.write("\u0192\7\u0097\2\2\u0191\u0190\3\2\2\2\u0191\u0192\3\2")
        buf.write("\2\2\u0192\u0194\3\2\2\2\u0193\u018f\3\2\2\2\u0194\u0197")
        buf.write("\3\2\2\2\u0195\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196")
        buf.write("\u0198\3\2\2\2\u0197\u0195\3\2\2\2\u0198\u01b3\5j\66\2")
        buf.write("\u0199\u019b\5(\25\2\u019a\u019c\7\u0097\2\2\u019b\u019a")
        buf.write("\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019e\3\2\2\2\u019d")
        buf.write("\u0199\3\2\2\2\u019e\u01a1\3\2\2\2\u019f\u019d\3\2\2\2")
        buf.write("\u019f\u01a0\3\2\2\2\u01a0\u01a2\3\2\2\2\u01a1\u019f\3")
        buf.write("\2\2\2\u01a2\u01a9\5&\24\2\u01a3\u01a5\7\u0097\2\2\u01a4")
        buf.write("\u01a3\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a6\3\2\2\2")
        buf.write("\u01a6\u01a8\5&\24\2\u01a7\u01a4\3\2\2\2\u01a8\u01ab\3")
        buf.write("\2\2\2\u01a9\u01a7\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01b0")
        buf.write("\3\2\2\2\u01ab\u01a9\3\2\2\2\u01ac\u01ae\7\u0097\2\2\u01ad")
        buf.write("\u01ac\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\3\2\2\2")
        buf.write("\u01af\u01b1\5j\66\2\u01b0\u01ad\3\2\2\2\u01b0\u01b1\3")
        buf.write("\2\2\2\u01b1\u01b3\3\2\2\2\u01b2\u0195\3\2\2\2\u01b2\u019f")
        buf.write("\3\2\2\2\u01b3#\3\2\2\2\u01b4\u01b6\5(\25\2\u01b5\u01b7")
        buf.write("\7\u0097\2\2\u01b6\u01b5\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7")
        buf.write("\u01b9\3\2\2\2\u01b8\u01b4\3\2\2\2\u01b9\u01bc\3\2\2\2")
        buf.write("\u01ba\u01b8\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01c3\3")
        buf.write("\2\2\2\u01bc\u01ba\3\2\2\2\u01bd\u01bf\5&\24\2\u01be\u01c0")
        buf.write("\7\u0097\2\2\u01bf\u01be\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0")
        buf.write("\u01c2\3\2\2\2\u01c1\u01bd\3\2\2\2\u01c2\u01c5\3\2\2\2")
        buf.write("\u01c3\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c6\3")
        buf.write("\2\2\2\u01c5\u01c3\3\2\2\2\u01c6\u01c8\5h\65\2\u01c7\u01c9")
        buf.write("\7\u0097\2\2\u01c8\u01c7\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9")
        buf.write("\u01cb\3\2\2\2\u01ca\u01ba\3\2\2\2\u01cb\u01cc\3\2\2\2")
        buf.write("\u01cc\u01ca\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01ce\3")
        buf.write("\2\2\2\u01ce\u01cf\5\"\22\2\u01cf%\3\2\2\2\u01d0\u01d8")
        buf.write("\5P)\2\u01d1\u01d8\5L\'\2\u01d2\u01d8\5R*\2\u01d3\u01d8")
        buf.write("\5^\60\2\u01d4\u01d8\5X-\2\u01d5\u01d8\5T+\2\u01d6\u01d8")
        buf.write("\5Z.\2\u01d7\u01d0\3\2\2\2\u01d7\u01d1\3\2\2\2\u01d7\u01d2")
        buf.write("\3\2\2\2\u01d7\u01d3\3\2\2\2\u01d7\u01d4\3\2\2\2\u01d7")
        buf.write("\u01d5\3\2\2\2\u01d7\u01d6\3\2\2\2\u01d8\'\3\2\2\2\u01d9")
        buf.write("\u01df\5F$\2\u01da\u01df\5|?\2\u01db\u01df\5H%\2\u01dc")
        buf.write("\u01df\5J&\2\u01dd\u01df\5`\61\2\u01de\u01d9\3\2\2\2\u01de")
        buf.write("\u01da\3\2\2\2\u01de\u01db\3\2\2\2\u01de\u01dc\3\2\2\2")
        buf.write("\u01de\u01dd\3\2\2\2\u01df)\3\2\2\2\u01e0\u01e9\5\62\32")
        buf.write("\2\u01e1\u01e9\5:\36\2\u01e2\u01e9\5,\27\2\u01e3\u01e9")
        buf.write("\5\64\33\2\u01e4\u01e9\5.\30\2\u01e5\u01e9\5\66\34\2\u01e6")
        buf.write("\u01e9\5\60\31\2\u01e7\u01e9\58\35\2\u01e8\u01e0\3\2\2")
        buf.write("\2\u01e8\u01e1\3\2\2\2\u01e8\u01e2\3\2\2\2\u01e8\u01e3")
        buf.write("\3\2\2\2\u01e8\u01e4\3\2\2\2\u01e8\u01e5\3\2\2\2\u01e8")
        buf.write("\u01e6\3\2\2\2\u01e8\u01e7\3\2\2\2\u01e9+\3\2\2\2\u01ea")
        buf.write("\u01eb\79\2\2\u01eb\u01ec\7\u0097\2\2\u01ec\u01ed\5> ")
        buf.write("\2\u01ed-\3\2\2\2\u01ee\u01ef\79\2\2\u01ef\u01f0\7\u0097")
        buf.write("\2\2\u01f0\u01f1\5@!\2\u01f1/\3\2\2\2\u01f2\u01f3\79\2")
        buf.write("\2\u01f3\u01f4\7\u0097\2\2\u01f4\u01f5\5B\"\2\u01f5\61")
        buf.write("\3\2\2\2\u01f6\u01f7\79\2\2\u01f7\u01f8\7\u0097\2\2\u01f8")
        buf.write("\u01f9\5<\37\2\u01f9\63\3\2\2\2\u01fa\u01fb\7:\2\2\u01fb")
        buf.write("\u01fc\7\u0097\2\2\u01fc\u01fd\5> \2\u01fd\65\3\2\2\2")
        buf.write("\u01fe\u01ff\7:\2\2\u01ff\u0200\7\u0097\2\2\u0200\u0201")
        buf.write("\5@!\2\u0201\67\3\2\2\2\u0202\u0203\7:\2\2\u0203\u0204")
        buf.write("\7\u0097\2\2\u0204\u0205\5B\"\2\u02059\3\2\2\2\u0206\u0207")
        buf.write("\7:\2\2\u0207\u0208\7\u0097\2\2\u0208\u0209\5<\37\2\u0209")
        buf.write(";\3\2\2\2\u020a\u020b\7;\2\2\u020b\u020c\7\u0097\2\2\u020c")
        buf.write("\u020e\7<\2\2\u020d\u020f\7\u0097\2\2\u020e\u020d\3\2")
        buf.write("\2\2\u020e\u020f\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0211")
        buf.write("\5\u00aaV\2\u0211\u0212\7\5\2\2\u0212\u0213\5\u010c\u0087")
        buf.write("\2\u0213\u0214\7\6\2\2\u0214=\3\2\2\2\u0215\u0216\7=\2")
        buf.write("\2\u0216\u0217\7\u0097\2\2\u0217\u0219\7<\2\2\u0218\u021a")
        buf.write("\7\u0097\2\2\u0219\u0218\3\2\2\2\u0219\u021a\3\2\2\2\u021a")
        buf.write("\u021b\3\2\2\2\u021b\u021c\7\5\2\2\u021c\u021d\5\u0100")
        buf.write("\u0081\2\u021d\u021e\5\u00aaV\2\u021e\u0220\7\6\2\2\u021f")
        buf.write("\u0221\7\u0097\2\2\u0220\u021f\3\2\2\2\u0220\u0221\3\2")
        buf.write("\2\2\u0221\u0222\3\2\2\2\u0222\u0223\7>\2\2\u0223\u0224")
        buf.write("\7\u0097\2\2\u0224\u0225\5\u010a\u0086\2\u0225\u0226\7")
        buf.write("\u0097\2\2\u0226\u0227\7?\2\2\u0227\u0228\7\u0097\2\2")
        buf.write("\u0228\u0229\7@\2\2\u0229?\3\2\2\2\u022a\u022b\7=\2\2")
        buf.write("\u022b\u022c\7\u0097\2\2\u022c\u022e\7<\2\2\u022d\u022f")
        buf.write("\7\u0097\2\2\u022e\u022d\3\2\2\2\u022e\u022f\3\2\2\2\u022f")
        buf.write("\u0230\3\2\2\2\u0230\u0231\7\5\2\2\u0231\u0232\5\u0100")
        buf.write("\u0081\2\u0232\u0233\5\u00aaV\2\u0233\u0235\7\6\2\2\u0234")
        buf.write("\u0236\7\u0097\2\2\u0235\u0234\3\2\2\2\u0235\u0236\3\2")
        buf.write("\2\2\u0236\u0237\3\2\2\2\u0237\u0238\7>\2\2\u0238\u0239")
        buf.write("\7\u0097\2\2\u0239\u023b\7A\2\2\u023a\u023c\7\u0097\2")
        buf.write("\2\u023b\u023a\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u023d")
        buf.write("\3\2\2\2\u023d\u023e\7\5\2\2\u023e\u023f\5\u010a\u0086")
        buf.write("\2\u023f\u0240\7\6\2\2\u0240A\3\2\2\2\u0241\u0242\7=\2")
        buf.write("\2\u0242\u0243\7\u0097\2\2\u0243\u0245\7<\2\2\u0244\u0246")
        buf.write("\7\u0097\2\2\u0245\u0244\3\2\2\2\u0245\u0246\3\2\2\2\u0246")
        buf.write("\u0247\3\2\2\2\u0247\u0249\5D#\2\u0248\u024a\7\u0097\2")
        buf.write("\2\u0249\u0248\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u024b")
        buf.write("\3\2\2\2\u024b\u024c\7>\2\2\u024c\u024d\7\u0097\2\2\u024d")
        buf.write("\u024f\7A\2\2\u024e\u0250\7\u0097\2\2\u024f\u024e\3\2")
        buf.write("\2\2\u024f\u0250\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0252")
        buf.write("\7\5\2\2\u0252\u0253\5\u010a\u0086\2\u0253\u0254\7\6\2")
        buf.write("\2\u0254C\3\2\2\2\u0255\u0257\7\5\2\2\u0256\u0258\7\u0097")
        buf.write("\2\2\u0257\u0256\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0259")
        buf.write("\3\2\2\2\u0259\u025a\7\6\2\2\u025a\u025b\5\u011c\u008f")
        buf.write("\2\u025b\u025c\7\7\2\2\u025c\u025d\5\u0100\u0081\2\u025d")
        buf.write("\u025e\5\u00a4S\2\u025e\u025f\7\b\2\2\u025f\u0260\5\u011c")
        buf.write("\u008f\2\u0260\u0262\7\5\2\2\u0261\u0263\7\u0097\2\2\u0262")
        buf.write("\u0261\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0264\3\2\2\2")
        buf.write("\u0264\u0265\7\6\2\2\u0265\u028b\3\2\2\2\u0266\u0268\7")
        buf.write("\5\2\2\u0267\u0269\7\u0097\2\2\u0268\u0267\3\2\2\2\u0268")
        buf.write("\u0269\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026b\7\6\2\2")
        buf.write("\u026b\u026c\5\u011c\u008f\2\u026c\u026d\7\7\2\2\u026d")
        buf.write("\u026e\5\u0100\u0081\2\u026e\u026f\5\u00a4S\2\u026f\u0270")
        buf.write("\7\b\2\2\u0270\u0271\5\u011c\u008f\2\u0271\u0272\5\u011a")
        buf.write("\u008e\2\u0272\u0274\7\5\2\2\u0273\u0275\7\u0097\2\2\u0274")
        buf.write("\u0273\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0276\3\2\2\2")
        buf.write("\u0276\u0277\7\6\2\2\u0277\u028b\3\2\2\2\u0278\u027a\7")
        buf.write("\5\2\2\u0279\u027b\7\u0097\2\2\u027a\u0279\3\2\2\2\u027a")
        buf.write("\u027b\3\2\2\2\u027b\u027c\3\2\2\2\u027c\u027d\7\6\2\2")
        buf.write("\u027d\u027e\5\u0118\u008d\2\u027e\u027f\5\u011c\u008f")
        buf.write("\2\u027f\u0280\7\7\2\2\u0280\u0281\5\u0100\u0081\2\u0281")
        buf.write("\u0282\5\u00a4S\2\u0282\u0283\7\b\2\2\u0283\u0284\5\u011c")
        buf.write("\u008f\2\u0284\u0286\7\5\2\2\u0285\u0287\7\u0097\2\2\u0286")
        buf.write("\u0285\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288\3\2\2\2")
        buf.write("\u0288\u0289\7\6\2\2\u0289\u028b\3\2\2\2\u028a\u0255\3")
        buf.write("\2\2\2\u028a\u0266\3\2\2\2\u028a\u0278\3\2\2\2\u028bE")
        buf.write("\3\2\2\2\u028c\u028d\7B\2\2\u028d\u028e\7\u0097\2\2\u028e")
        buf.write("\u028f\7C\2\2\u028f\u0294\7\u0097\2\2\u0290\u0291\7D\2")
        buf.write("\2\u0291\u0292\7\u0097\2\2\u0292\u0293\7E\2\2\u0293\u0295")
        buf.write("\7\u0097\2\2\u0294\u0290\3\2\2\2\u0294\u0295\3\2\2\2\u0295")
        buf.write("\u0296\3\2\2\2\u0296\u0297\7F\2\2\u0297\u0298\7\u0097")
        buf.write("\2\2\u0298\u0299\5\u00b2Z\2\u0299\u029a\7\u0097\2\2\u029a")
        buf.write("\u029b\7G\2\2\u029b\u029c\7\u0097\2\2\u029c\u029d\5\u0100")
        buf.write("\u0081\2\u029d\u02a1\7\u0097\2\2\u029e\u029f\7H\2\2\u029f")
        buf.write("\u02a0\7\u0097\2\2\u02a0\u02a2\7~\2\2\u02a1\u029e\3\2")
        buf.write("\2\2\u02a1\u02a2\3\2\2\2\u02a2G\3\2\2\2\u02a3\u02a4\7")
        buf.write("I\2\2\u02a4\u02a6\7\u0097\2\2\u02a5\u02a3\3\2\2\2\u02a5")
        buf.write("\u02a6\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a9\7J\2\2")
        buf.write("\u02a8\u02aa\7\u0097\2\2\u02a9\u02a8\3\2\2\2\u02a9\u02aa")
        buf.write("\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02af\5\u0090I\2\u02ac")
        buf.write("\u02ae\5z>\2\u02ad\u02ac\3\2\2\2\u02ae\u02b1\3\2\2\2\u02af")
        buf.write("\u02ad\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b6\3\2\2\2")
        buf.write("\u02b1\u02af\3\2\2\2\u02b2\u02b4\7\u0097\2\2\u02b3\u02b2")
        buf.write("\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5")
        buf.write("\u02b7\5\u008eH\2\u02b6\u02b3\3\2\2\2\u02b6\u02b7\3\2")
        buf.write("\2\2\u02b7I\3\2\2\2\u02b8\u02ba\7K\2\2\u02b9\u02bb\7\u0097")
        buf.write("\2\2\u02ba\u02b9\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bc")
        buf.write("\3\2\2\2\u02bc\u02bd\5\u00b2Z\2\u02bd\u02be\7\u0097\2")
        buf.write("\2\u02be\u02bf\7G\2\2\u02bf\u02c0\7\u0097\2\2\u02c0\u02c1")
        buf.write("\5\u0100\u0081\2\u02c1K\3\2\2\2\u02c2\u02c4\7L\2\2\u02c3")
        buf.write("\u02c5\7\u0097\2\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5\3\2")
        buf.write("\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02cb\5\u0092J\2\u02c7")
        buf.write("\u02c8\7\u0097\2\2\u02c8\u02ca\5N(\2\u02c9\u02c7\3\2\2")
        buf.write("\2\u02ca\u02cd\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cb\u02cc")
        buf.write("\3\2\2\2\u02ccM\3\2\2\2\u02cd\u02cb\3\2\2\2\u02ce\u02cf")
        buf.write("\7<\2\2\u02cf\u02d0\7\u0097\2\2\u02d0\u02d1\7J\2\2\u02d1")
        buf.write("\u02d2\7\u0097\2\2\u02d2\u02d9\5T+\2\u02d3\u02d4\7<\2")
        buf.write("\2\u02d4\u02d5\7\u0097\2\2\u02d5\u02d6\79\2\2\u02d6\u02d7")
        buf.write("\7\u0097\2\2\u02d7\u02d9\5T+\2\u02d8\u02ce\3\2\2\2\u02d8")
        buf.write("\u02d3\3\2\2\2\u02d9O\3\2\2\2\u02da\u02dc\79\2\2\u02db")
        buf.write("\u02dd\7\u0097\2\2\u02dc\u02db\3\2\2\2\u02dc\u02dd\3\2")
        buf.write("\2\2\u02dd\u02de\3\2\2\2\u02de\u02df\5\u0090I\2\u02df")
        buf.write("Q\3\2\2\2\u02e0\u02e1\79\2\2\u02e1\u02e2\7\u0097\2\2\u02e2")
        buf.write("\u02e4\7@\2\2\u02e3\u02e5\7\u0097\2\2\u02e4\u02e3\3\2")
        buf.write("\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7")
        buf.write("\5\u0090I\2\u02e7S\3\2\2\2\u02e8\u02ea\7M\2\2\u02e9\u02eb")
        buf.write("\7\u0097\2\2\u02ea\u02e9\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb")
        buf.write("\u02ec\3\2\2\2\u02ec\u02f1\5V,\2\u02ed\u02ee\7\t\2\2\u02ee")
        buf.write("\u02f0\5V,\2\u02ef\u02ed\3\2\2\2\u02f0\u02f3\3\2\2\2\u02f1")
        buf.write("\u02ef\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2U\3\2\2\2\u02f3")
        buf.write("\u02f1\3\2\2\2\u02f4\u02f6\5\u010a\u0086\2\u02f5\u02f7")
        buf.write("\7\u0097\2\2\u02f6\u02f5\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7")
        buf.write("\u02f8\3\2\2\2\u02f8\u02fa\7\4\2\2\u02f9\u02fb\7\u0097")
        buf.write("\2\2\u02fa\u02f9\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fc")
        buf.write("\3\2\2\2\u02fc\u02fd\5\u00b2Z\2\u02fd\u0319\3\2\2\2\u02fe")
        buf.write("\u0300\5\u0100\u0081\2\u02ff\u0301\7\u0097\2\2\u0300\u02ff")
        buf.write("\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u0302\3\2\2\2\u0302")
        buf.write("\u0304\7\4\2\2\u0303\u0305\7\u0097\2\2\u0304\u0303\3\2")
        buf.write("\2\2\u0304\u0305\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0307")
        buf.write("\5\u00b2Z\2\u0307\u0319\3\2\2\2\u0308\u030a\5\u0100\u0081")
        buf.write("\2\u0309\u030b\7\u0097\2\2\u030a\u0309\3\2\2\2\u030a\u030b")
        buf.write("\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u030e\7\n\2\2\u030d")
        buf.write("\u030f\7\u0097\2\2\u030e\u030d\3\2\2\2\u030e\u030f\3\2")
        buf.write("\2\2\u030f\u0310\3\2\2\2\u0310\u0311\5\u00b2Z\2\u0311")
        buf.write("\u0319\3\2\2\2\u0312\u0314\5\u0100\u0081\2\u0313\u0315")
        buf.write("\7\u0097\2\2\u0314\u0313\3\2\2\2\u0314\u0315\3\2\2\2\u0315")
        buf.write("\u0316\3\2\2\2\u0316\u0317\5\u00a8U\2\u0317\u0319\3\2")
        buf.write("\2\2\u0318\u02f4\3\2\2\2\u0318\u02fe\3\2\2\2\u0318\u0308")
        buf.write("\3\2\2\2\u0318\u0312\3\2\2\2\u0319W\3\2\2\2\u031a\u031b")
        buf.write("\7N\2\2\u031b\u031d\7\u0097\2\2\u031c\u031a\3\2\2\2\u031c")
        buf.write("\u031d\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u0320\7O\2\2")
        buf.write("\u031f\u0321\7\u0097\2\2\u0320\u031f\3\2\2\2\u0320\u0321")
        buf.write("\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u032d\5\u00b2Z\2\u0323")
        buf.write("\u0325\7\u0097\2\2\u0324\u0323\3\2\2\2\u0324\u0325\3\2")
        buf.write("\2\2\u0325\u0326\3\2\2\2\u0326\u0328\7\t\2\2\u0327\u0329")
        buf.write("\7\u0097\2\2\u0328\u0327\3\2\2\2\u0328\u0329\3\2\2\2\u0329")
        buf.write("\u032a\3\2\2\2\u032a\u032c\5\u00b2Z\2\u032b\u0324\3\2")
        buf.write("\2\2\u032c\u032f\3\2\2\2\u032d\u032b\3\2\2\2\u032d\u032e")
        buf.write("\3\2\2\2\u032eY\3\2\2\2\u032f\u032d\3\2\2\2\u0330\u0331")
        buf.write("\7P\2\2\u0331\u0332\7\u0097\2\2\u0332\u033d\5\\/\2\u0333")
        buf.write("\u0335\7\u0097\2\2\u0334\u0333\3\2\2\2\u0334\u0335\3\2")
        buf.write("\2\2\u0335\u0336\3\2\2\2\u0336\u0338\7\t\2\2\u0337\u0339")
        buf.write("\7\u0097\2\2\u0338\u0337\3\2\2\2\u0338\u0339\3\2\2\2\u0339")
        buf.write("\u033a\3\2\2\2\u033a\u033c\5\\/\2\u033b\u0334\3\2\2\2")
        buf.write("\u033c\u033f\3\2\2\2\u033d\u033b\3\2\2\2\u033d\u033e\3")
        buf.write("\2\2\2\u033e[\3\2\2\2\u033f\u033d\3\2\2\2\u0340\u0341")
        buf.write("\5\u0100\u0081\2\u0341\u0342\5\u00a8U\2\u0342\u0345\3")
        buf.write("\2\2\2\u0343\u0345\5\u010a\u0086\2\u0344\u0340\3\2\2\2")
        buf.write("\u0344\u0343\3\2\2\2\u0345]\3\2\2\2\u0346\u0348\7Q\2\2")
        buf.write("\u0347\u0349\7\u0097\2\2\u0348\u0347\3\2\2\2\u0348\u0349")
        buf.write("\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034c\7\5\2\2\u034b")
        buf.write("\u034d\7\u0097\2\2\u034c\u034b\3\2\2\2\u034c\u034d\3\2")
        buf.write("\2\2\u034d\u034e\3\2\2\2\u034e\u034f\5\u0100\u0081\2\u034f")
        buf.write("\u0350\7\u0097\2\2\u0350\u0351\7R\2\2\u0351\u0352\7\u0097")
        buf.write("\2\2\u0352\u0354\5\u00b2Z\2\u0353\u0355\7\u0097\2\2\u0354")
        buf.write("\u0353\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0356\3\2\2\2")
        buf.write("\u0356\u0359\7\13\2\2\u0357\u0358\7\u0097\2\2\u0358\u035a")
        buf.write("\5&\24\2\u0359\u0357\3\2\2\2\u035a\u035b\3\2\2\2\u035b")
        buf.write("\u0359\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035e\3\2\2\2")
        buf.write("\u035d\u035f\7\u0097\2\2\u035e\u035d\3\2\2\2\u035e\u035f")
        buf.write("\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u0361\7\6\2\2\u0361")
        buf.write("_\3\2\2\2\u0362\u0363\7S\2\2\u0363\u0364\7\u0097\2\2\u0364")
        buf.write("\u036b\5\u00ecw\2\u0365\u0367\7\u0097\2\2\u0366\u0365")
        buf.write("\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0368\3\2\2\2\u0368")
        buf.write("\u0369\7T\2\2\u0369\u036a\7\u0097\2\2\u036a\u036c\5d\63")
        buf.write("\2\u036b\u0366\3\2\2\2\u036b\u036c\3\2\2\2\u036ca\3\2")
        buf.write("\2\2\u036d\u036e\7S\2\2\u036e\u0371\7\u0097\2\2\u036f")
        buf.write("\u0372\5\u00ecw\2\u0370\u0372\5\u00eex\2\u0371\u036f\3")
        buf.write("\2\2\2\u0371\u0370\3\2\2\2\u0372\u0377\3\2\2\2\u0373\u0374")
        buf.write("\7\u0097\2\2\u0374\u0375\7T\2\2\u0375\u0376\7\u0097\2")
        buf.write("\2\u0376\u0378\5d\63\2\u0377\u0373\3\2\2\2\u0377\u0378")
        buf.write("\3\2\2\2\u0378c\3\2\2\2\u0379\u0384\5f\64\2\u037a\u037c")
        buf.write("\7\u0097\2\2\u037b\u037a\3\2\2\2\u037b\u037c\3\2\2\2\u037c")
        buf.write("\u037d\3\2\2\2\u037d\u037f\7\t\2\2\u037e\u0380\7\u0097")
        buf.write("\2\2\u037f\u037e\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0381")
        buf.write("\3\2\2\2\u0381\u0383\5f\64\2\u0382\u037b\3\2\2\2\u0383")
        buf.write("\u0386\3\2\2\2\u0384\u0382\3\2\2\2\u0384\u0385\3\2\2\2")
        buf.write("\u0385\u0389\3\2\2\2\u0386\u0384\3\2\2\2\u0387\u0389\7")
        buf.write("\f\2\2\u0388\u0379\3\2\2\2\u0388\u0387\3\2\2\2\u0389e")
        buf.write("\3\2\2\2\u038a\u038b\5\u00f0y\2\u038b\u038c\7\u0097\2")
        buf.write("\2\u038c\u038d\7G\2\2\u038d\u038e\7\u0097\2\2\u038e\u0390")
        buf.write("\3\2\2\2\u038f\u038a\3\2\2\2\u038f\u0390\3\2\2\2\u0390")
        buf.write("\u0391\3\2\2\2\u0391\u0392\5\u0100\u0081\2\u0392g\3\2")
        buf.write("\2\2\u0393\u0398\7D\2\2\u0394\u0396\7\u0097\2\2\u0395")
        buf.write("\u0394\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0397\3\2\2\2")
        buf.write("\u0397\u0399\7U\2\2\u0398\u0395\3\2\2\2\u0398\u0399\3")
        buf.write("\2\2\2\u0399\u039a\3\2\2\2\u039a\u039b\7\u0097\2\2\u039b")
        buf.write("\u03a0\5l\67\2\u039c\u039e\7\u0097\2\2\u039d\u039c\3\2")
        buf.write("\2\2\u039d\u039e\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a1")
        buf.write("\5\u008eH\2\u03a0\u039d\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1")
        buf.write("i\3\2\2\2\u03a2\u03a7\7V\2\2\u03a3\u03a5\7\u0097\2\2\u03a4")
        buf.write("\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\3\2\2\2")
        buf.write("\u03a6\u03a8\7U\2\2\u03a7\u03a4\3\2\2\2\u03a7\u03a8\3")
        buf.write("\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03aa\7\u0097\2\2\u03aa")
        buf.write("\u03ab\5l\67\2\u03abk\3\2\2\2\u03ac\u03af\5n8\2\u03ad")
        buf.write("\u03ae\7\u0097\2\2\u03ae\u03b0\5r:\2\u03af\u03ad\3\2\2")
        buf.write("\2\u03af\u03b0\3\2\2\2\u03b0\u03b3\3\2\2\2\u03b1\u03b2")
        buf.write("\7\u0097\2\2\u03b2\u03b4\5t;\2\u03b3\u03b1\3\2\2\2\u03b3")
        buf.write("\u03b4\3\2\2\2\u03b4\u03b7\3\2\2\2\u03b5\u03b6\7\u0097")
        buf.write("\2\2\u03b6\u03b8\5v<\2\u03b7\u03b5\3\2\2\2\u03b7\u03b8")
        buf.write("\3\2\2\2\u03b8m\3\2\2\2\u03b9\u03c4\7\r\2\2\u03ba\u03bc")
        buf.write("\7\u0097\2\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03bf\7\t\2\2\u03be\u03c0\7\u0097")
        buf.write("\2\2\u03bf\u03be\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1")
        buf.write("\3\2\2\2\u03c1\u03c3\5p9\2\u03c2\u03bb\3\2\2\2\u03c3\u03c6")
        buf.write("\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5")
        buf.write("\u03d6\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c7\u03d2\5p9\2\u03c8")
        buf.write("\u03ca\7\u0097\2\2\u03c9\u03c8\3\2\2\2\u03c9\u03ca\3\2")
        buf.write("\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cd\7\t\2\2\u03cc\u03ce")
        buf.write("\7\u0097\2\2\u03cd\u03cc\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce")
        buf.write("\u03cf\3\2\2\2\u03cf\u03d1\5p9\2\u03d0\u03c9\3\2\2\2\u03d1")
        buf.write("\u03d4\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2")
        buf.write("\u03d3\u03d6\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d5\u03b9\3")
        buf.write("\2\2\2\u03d5\u03c7\3\2\2\2\u03d6o\3\2\2\2\u03d7\u03d8")
        buf.write("\5\u00b2Z\2\u03d8\u03d9\7\u0097\2\2\u03d9\u03da\7G\2\2")
        buf.write("\u03da\u03db\7\u0097\2\2\u03db\u03dc\5\u0100\u0081\2\u03dc")
        buf.write("\u03df\3\2\2\2\u03dd\u03df\5\u00b2Z\2\u03de\u03d7\3\2")
        buf.write("\2\2\u03de\u03dd\3\2\2\2\u03dfq\3\2\2\2\u03e0\u03e1\7")
        buf.write("W\2\2\u03e1\u03e2\7\u0097\2\2\u03e2\u03e3\7X\2\2\u03e3")
        buf.write("\u03e4\7\u0097\2\2\u03e4\u03ec\5x=\2\u03e5\u03e7\7\t\2")
        buf.write("\2\u03e6\u03e8\7\u0097\2\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8")
        buf.write("\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03eb\5x=\2\u03ea\u03e5")
        buf.write("\3\2\2\2\u03eb\u03ee\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ec")
        buf.write("\u03ed\3\2\2\2\u03eds\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ef")
        buf.write("\u03f0\7Y\2\2\u03f0\u03f1\7\u0097\2\2\u03f1\u03f2\5\u00b2")
        buf.write("Z\2\u03f2u\3\2\2\2\u03f3\u03f4\7Z\2\2\u03f4\u03f5\7\u0097")
        buf.write("\2\2\u03f5\u03f6\5\u00b2Z\2\u03f6w\3\2\2\2\u03f7\u03fc")
        buf.write("\5\u00b2Z\2\u03f8\u03fa\7\u0097\2\2\u03f9\u03f8\3\2\2")
        buf.write("\2\u03f9\u03fa\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fd")
        buf.write("\t\2\2\2\u03fc\u03f9\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd")
        buf.write("y\3\2\2\2\u03fe\u0400\7\u0097\2\2\u03ff\u03fe\3\2\2\2")
        buf.write("\u03ff\u0400\3\2\2\2\u0400\u0426\3\2\2\2\u0401\u0402\7")
        buf.write("\64\2\2\u0402\u0403\7\u0097\2\2\u0403\u0404\7;\2\2\u0404")
        buf.write("\u0405\7\u0097\2\2\u0405\u0406\5\u0100\u0081\2\u0406\u0407")
        buf.write("\5\u00aaV\2\u0407\u0408\7\5\2\2\u0408\u0409\5\u010c\u0087")
        buf.write("\2\u0409\u040a\7\6\2\2\u040a\u0427\3\2\2\2\u040b\u040c")
        buf.write("\7\64\2\2\u040c\u040d\7\u0097\2\2\u040d\u040e\7_\2\2\u040e")
        buf.write("\u040f\7\u0097\2\2\u040f\u0410\7<\2\2\u0410\u0411\7\u0097")
        buf.write("\2\2\u0411\u041c\5\u0100\u0081\2\u0412\u0414\7\u0097\2")
        buf.write("\2\u0413\u0412\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0415")
        buf.write("\3\2\2\2\u0415\u0417\7\t\2\2\u0416\u0418\7\u0097\2\2\u0417")
        buf.write("\u0416\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u0419\3\2\2\2")
        buf.write("\u0419\u041b\5\u0100\u0081\2\u041a\u0413\3\2\2\2\u041b")
        buf.write("\u041e\3\2\2\2\u041c\u041a\3\2\2\2\u041c\u041d\3\2\2\2")
        buf.write("\u041d\u0427\3\2\2\2\u041e\u041c\3\2\2\2\u041f\u0420\7")
        buf.write("\64\2\2\u0420\u0421\7\u0097\2\2\u0421\u0422\7`\2\2\u0422")
        buf.write("\u0423\7\u0097\2\2\u0423\u0424\5\u0100\u0081\2\u0424\u0425")
        buf.write("\5\u00aaV\2\u0425\u0427\3\2\2\2\u0426\u0401\3\2\2\2\u0426")
        buf.write("\u040b\3\2\2\2\u0426\u041f\3\2\2\2\u0427{\3\2\2\2\u0428")
        buf.write("\u0429\7a\2\2\u0429\u042a\7\u0097\2\2\u042a\u0435\5~@")
        buf.write("\2\u042b\u042d\7\u0097\2\2\u042c\u042b\3\2\2\2\u042c\u042d")
        buf.write("\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u0430\7\t\2\2\u042f")
        buf.write("\u0431\7\u0097\2\2\u0430\u042f\3\2\2\2\u0430\u0431\3\2")
        buf.write("\2\2\u0431\u0432\3\2\2\2\u0432\u0434\5~@\2\u0433\u042c")
        buf.write("\3\2\2\2\u0434\u0437\3\2\2\2\u0435\u0433\3\2\2\2\u0435")
        buf.write("\u0436\3\2\2\2\u0436\u0439\3\2\2\2\u0437\u0435\3\2\2\2")
        buf.write("\u0438\u043a\5\u008eH\2\u0439\u0438\3\2\2\2\u0439\u043a")
        buf.write("\3\2\2\2\u043a}\3\2\2\2\u043b\u043d\5\u0100\u0081\2\u043c")
        buf.write("\u043e\7\u0097\2\2\u043d\u043c\3\2\2\2\u043d\u043e\3\2")
        buf.write("\2\2\u043e\u043f\3\2\2\2\u043f\u0441\7\4\2\2\u0440\u0442")
        buf.write("\7\u0097\2\2\u0441\u0440\3\2\2\2\u0441\u0442\3\2\2\2\u0442")
        buf.write("\u0443\3\2\2\2\u0443\u0444\5\u0080A\2\u0444\177\3\2\2")
        buf.write("\2\u0445\u0448\5\u0082B\2\u0446\u0448\5\u0084C\2\u0447")
        buf.write("\u0445\3\2\2\2\u0447\u0446\3\2\2\2\u0448\u0081\3\2\2\2")
        buf.write("\u0449\u044b\7b\2\2\u044a\u044c\7\u0097\2\2\u044b\u044a")
        buf.write("\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u0450\3\2\2\2\u044d")
        buf.write("\u0451\5\u0086D\2\u044e\u0451\5\u0088E\2\u044f\u0451\5")
        buf.write("\u008aF\2\u0450\u044d\3\2\2\2\u0450\u044e\3\2\2\2\u0450")
        buf.write("\u044f\3\2\2\2\u0451\u0083\3\2\2\2\u0452\u0456\t\3\2\2")
        buf.write("\u0453\u0457\5\u0086D\2\u0454\u0457\5\u0088E\2\u0455\u0457")
        buf.write("\5\u008aF\2\u0456\u0453\3\2\2\2\u0456\u0454\3\2\2\2\u0456")
        buf.write("\u0455\3\2\2\2\u0457\u0085\3\2\2\2\u0458\u0459\7\16\2")
        buf.write("\2\u0459\u045a\5\u0116\u008c\2\u045a\u045b\7\5\2\2\u045b")
        buf.write("\u045c\5\u0116\u008c\2\u045c\u045f\7\4\2\2\u045d\u0460")
        buf.write("\7~\2\2\u045e\u0460\5\u0106\u0084\2\u045f\u045d\3\2\2")
        buf.write("\2\u045f\u045e\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0462")
        buf.write("\7\6\2\2\u0462\u0087\3\2\2\2\u0463\u0464\7\16\2\2\u0464")
        buf.write("\u0465\5\u0116\u008c\2\u0465\u0468\7\5\2\2\u0466\u0469")
        buf.write("\7~\2\2\u0467\u0469\5\u0106\u0084\2\u0468\u0466\3\2\2")
        buf.write("\2\u0468\u0467\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046b")
        buf.write("\7\6\2\2\u046b\u0089\3\2\2\2\u046c\u0470\7\5\2\2\u046d")
        buf.write("\u0471\5\u008cG\2\u046e\u0471\5\u0106\u0084\2\u046f\u0471")
        buf.write("\7\r\2\2\u0470\u046d\3\2\2\2\u0470\u046e\3\2\2\2\u0470")
        buf.write("\u046f\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0473\7\6\2\2")
        buf.write("\u0473\u008b\3\2\2\2\u0474\u047f\5\u010e\u0088\2\u0475")
        buf.write("\u0477\7\u0097\2\2\u0476\u0475\3\2\2\2\u0476\u0477\3\2")
        buf.write("\2\2\u0477\u0478\3\2\2\2\u0478\u047a\7\t\2\2\u0479\u047b")
        buf.write("\7\u0097\2\2\u047a\u0479\3\2\2\2\u047a\u047b\3\2\2\2\u047b")
        buf.write("\u047c\3\2\2\2\u047c\u047e\5\u010e\u0088\2\u047d\u0476")
        buf.write("\3\2\2\2\u047e\u0481\3\2\2\2\u047f\u047d\3\2\2\2\u047f")
        buf.write("\u0480\3\2\2\2\u0480\u008d\3\2\2\2\u0481\u047f\3\2\2\2")
        buf.write("\u0482\u0483\7e\2\2\u0483\u0484\7\u0097\2\2\u0484\u0485")
        buf.write("\5\u00b2Z\2\u0485\u008f\3\2\2\2\u0486\u0491\5\u0092J\2")
        buf.write("\u0487\u0489\7\u0097\2\2\u0488\u0487\3\2\2\2\u0488\u0489")
        buf.write("\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048c\7\t\2\2\u048b")
        buf.write("\u048d\7\u0097\2\2\u048c\u048b\3\2\2\2\u048c\u048d\3\2")
        buf.write("\2\2\u048d\u048e\3\2\2\2\u048e\u0490\5\u0092J\2\u048f")
        buf.write("\u0488\3\2\2\2\u0490\u0493\3\2\2\2\u0491\u048f\3\2\2\2")
        buf.write("\u0491\u0492\3\2\2\2\u0492\u0091\3\2\2\2\u0493\u0491\3")
        buf.write("\2\2\2\u0494\u0496\5\u0100\u0081\2\u0495\u0497\7\u0097")
        buf.write("\2\2\u0496\u0495\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0498")
        buf.write("\3\2\2\2\u0498\u049a\7\4\2\2\u0499\u049b\7\u0097\2\2\u049a")
        buf.write("\u0499\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049c\3\2\2\2")
        buf.write("\u049c\u049d\5\u0094K\2\u049d\u04a0\3\2\2\2\u049e\u04a0")
        buf.write("\5\u0094K\2\u049f\u0494\3\2\2\2\u049f\u049e\3\2\2\2\u04a0")
        buf.write("\u0093\3\2\2\2\u04a1\u04a4\5\u0096L\2\u04a2\u04a4\5\u0098")
        buf.write("M\2\u04a3\u04a1\3\2\2\2\u04a3\u04a2\3\2\2\2\u04a4\u0095")
        buf.write("\3\2\2\2\u04a5\u04a6\7f\2\2\u04a6\u04a7\7\5\2\2\u04a7")
        buf.write("\u04a8\5\u0098M\2\u04a8\u04a9\7\6\2\2\u04a9\u04b0\3\2")
        buf.write("\2\2\u04aa\u04ab\7g\2\2\u04ab\u04ac\7\5\2\2\u04ac\u04ad")
        buf.write("\5\u0098M\2\u04ad\u04ae\7\6\2\2\u04ae\u04b0\3\2\2\2\u04af")
        buf.write("\u04a5\3\2\2\2\u04af\u04aa\3\2\2\2\u04b0\u0097\3\2\2\2")
        buf.write("\u04b1\u04b8\5\u009aN\2\u04b2\u04b4\7\u0097\2\2\u04b3")
        buf.write("\u04b2\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b5\3\2\2\2")
        buf.write("\u04b5\u04b7\5\u009cO\2\u04b6\u04b3\3\2\2\2\u04b7\u04ba")
        buf.write("\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9")
        buf.write("\u04c0\3\2\2\2\u04ba\u04b8\3\2\2\2\u04bb\u04bc\7\5\2\2")
        buf.write("\u04bc\u04bd\5\u0098M\2\u04bd\u04be\7\6\2\2\u04be\u04c0")
        buf.write("\3\2\2\2\u04bf\u04b1\3\2\2\2\u04bf\u04bb\3\2\2\2\u04c0")
        buf.write("\u0099\3\2\2\2\u04c1\u04c3\7\5\2\2\u04c2\u04c4\7\u0097")
        buf.write("\2\2\u04c3\u04c2\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c9")
        buf.write("\3\2\2\2\u04c5\u04c7\5\u0100\u0081\2\u04c6\u04c8\7\u0097")
        buf.write("\2\2\u04c7\u04c6\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04ca")
        buf.write("\3\2\2\2\u04c9\u04c5\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca")
        buf.write("\u04cf\3\2\2\2\u04cb\u04cd\5\u00a8U\2\u04cc\u04ce\7\u0097")
        buf.write("\2\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04d0")
        buf.write("\3\2\2\2\u04cf\u04cb\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0")
        buf.write("\u04d5\3\2\2\2\u04d1\u04d3\5\u00a2R\2\u04d2\u04d4\7\u0097")
        buf.write("\2\2\u04d3\u04d2\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04d6")
        buf.write("\3\2\2\2\u04d5\u04d1\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6")
        buf.write("\u04d7\3\2\2\2\u04d7\u04d8\7\6\2\2\u04d8\u009b\3\2\2\2")
        buf.write("\u04d9\u04db\5\u009eP\2\u04da\u04dc\7\u0097\2\2\u04db")
        buf.write("\u04da\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04dd\3\2\2\2")
        buf.write("\u04dd\u04de\5\u009aN\2\u04de\u009d\3\2\2\2\u04df\u04e1")
        buf.write("\5\u0118\u008d\2\u04e0\u04e2\7\u0097\2\2\u04e1\u04e0\3")
        buf.write("\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e5")
        buf.write("\5\u011c\u008f\2\u04e4\u04e6\7\u0097\2\2\u04e5\u04e4\3")
        buf.write("\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\u04e8\3\2\2\2\u04e7\u04e9")
        buf.write("\5\u00a0Q\2\u04e8\u04e7\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9")
        buf.write("\u04eb\3\2\2\2\u04ea\u04ec\7\u0097\2\2\u04eb\u04ea\3\2")
        buf.write("\2\2\u04eb\u04ec\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ef")
        buf.write("\5\u011c\u008f\2\u04ee\u04f0\7\u0097\2\2\u04ef\u04ee\3")
        buf.write("\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f2")
        buf.write("\5\u011a\u008e\2\u04f2\u0520\3\2\2\2\u04f3\u04f5\5\u0118")
        buf.write("\u008d\2\u04f4\u04f6\7\u0097\2\2\u04f5\u04f4\3\2\2\2\u04f5")
        buf.write("\u04f6\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f9\5\u011c")
        buf.write("\u008f\2\u04f8\u04fa\7\u0097\2\2\u04f9\u04f8\3\2\2\2\u04f9")
        buf.write("\u04fa\3\2\2\2\u04fa\u04fc\3\2\2\2\u04fb\u04fd\5\u00a0")
        buf.write("Q\2\u04fc\u04fb\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04ff")
        buf.write("\3\2\2\2\u04fe\u0500\7\u0097\2\2\u04ff\u04fe\3\2\2\2\u04ff")
        buf.write("\u0500\3\2\2\2\u0500\u0501\3\2\2\2\u0501\u0502\5\u011c")
        buf.write("\u008f\2\u0502\u0520\3\2\2\2\u0503\u0505\5\u011c\u008f")
        buf.write("\2\u0504\u0506\7\u0097\2\2\u0505\u0504\3\2\2\2\u0505\u0506")
        buf.write("\3\2\2\2\u0506\u0508\3\2\2\2\u0507\u0509\5\u00a0Q\2\u0508")
        buf.write("\u0507\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050b\3\2\2\2")
        buf.write("\u050a\u050c\7\u0097\2\2\u050b\u050a\3\2\2\2\u050b\u050c")
        buf.write("\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u050f\5\u011c\u008f")
        buf.write("\2\u050e\u0510\7\u0097\2\2\u050f\u050e\3\2\2\2\u050f\u0510")
        buf.write("\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0512\5\u011a\u008e")
        buf.write("\2\u0512\u0520\3\2\2\2\u0513\u0515\5\u011c\u008f\2\u0514")
        buf.write("\u0516\7\u0097\2\2\u0515\u0514\3\2\2\2\u0515\u0516\3\2")
        buf.write("\2\2\u0516\u0518\3\2\2\2\u0517\u0519\5\u00a0Q\2\u0518")
        buf.write("\u0517\3\2\2\2\u0518\u0519\3\2\2\2\u0519\u051b\3\2\2\2")
        buf.write("\u051a\u051c\7\u0097\2\2\u051b\u051a\3\2\2\2\u051b\u051c")
        buf.write("\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051e\5\u011c\u008f")
        buf.write("\2\u051e\u0520\3\2\2\2\u051f\u04df\3\2\2\2\u051f\u04f3")
        buf.write("\3\2\2\2\u051f\u0503\3\2\2\2\u051f\u0513\3\2\2\2\u0520")
        buf.write("\u009f\3\2\2\2\u0521\u0523\7\7\2\2\u0522\u0524\7\u0097")
        buf.write("\2\2\u0523\u0522\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0529")
        buf.write("\3\2\2\2\u0525\u0527\5\u0100\u0081\2\u0526\u0528\7\u0097")
        buf.write("\2\2\u0527\u0526\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u052a")
        buf.write("\3\2\2\2\u0529\u0525\3\2\2\2\u0529\u052a\3\2\2\2\u052a")
        buf.write("\u052f\3\2\2\2\u052b\u052d\5\u00a6T\2\u052c\u052e\7\u0097")
        buf.write("\2\2\u052d\u052c\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u0530")
        buf.write("\3\2\2\2\u052f\u052b\3\2\2\2\u052f\u0530\3\2\2\2\u0530")
        buf.write("\u0532\3\2\2\2\u0531\u0533\5\u00acW\2\u0532\u0531\3\2")
        buf.write("\2\2\u0532\u0533\3\2\2\2\u0533\u0538\3\2\2\2\u0534\u0536")
        buf.write("\5\u00a2R\2\u0535\u0537\7\u0097\2\2\u0536\u0535\3\2\2")
        buf.write("\2\u0536\u0537\3\2\2\2\u0537\u0539\3\2\2\2\u0538\u0534")
        buf.write("\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u053a\3\2\2\2\u053a")
        buf.write("\u053b\7\b\2\2\u053b\u00a1\3\2\2\2\u053c\u0540\5\u0104")
        buf.write("\u0083\2\u053d\u0540\5\u0108\u0085\2\u053e\u0540\5\u0106")
        buf.write("\u0084\2\u053f\u053c\3\2\2\2\u053f\u053d\3\2\2\2\u053f")
        buf.write("\u053e\3\2\2\2\u0540\u00a3\3\2\2\2\u0541\u0543\7\16\2")
        buf.write("\2\u0542\u0544\7\u0097\2\2\u0543\u0542\3\2\2\2\u0543\u0544")
        buf.write("\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u0546\5\u00b0Y\2\u0546")
        buf.write("\u00a5\3\2\2\2\u0547\u0549\7\16\2\2\u0548\u054a\7\u0097")
        buf.write("\2\2\u0549\u0548\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054b")
        buf.write("\3\2\2\2\u054b\u0559\5\u00b0Y\2\u054c\u054e\7\u0097\2")
        buf.write("\2\u054d\u054c\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u054f")
        buf.write("\3\2\2\2\u054f\u0551\7\13\2\2\u0550\u0552\7\16\2\2\u0551")
        buf.write("\u0550\3\2\2\2\u0551\u0552\3\2\2\2\u0552\u0554\3\2\2\2")
        buf.write("\u0553\u0555\7\u0097\2\2\u0554\u0553\3\2\2\2\u0554\u0555")
        buf.write("\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0558\5\u00b0Y\2\u0557")
        buf.write("\u054d\3\2\2\2\u0558\u055b\3\2\2\2\u0559\u0557\3\2\2\2")
        buf.write("\u0559\u055a\3\2\2\2\u055a\u00a7\3\2\2\2\u055b\u0559\3")
        buf.write("\2\2\2\u055c\u0563\5\u00aaV\2\u055d\u055f\7\u0097\2\2")
        buf.write("\u055e\u055d\3\2\2\2\u055e\u055f\3\2\2\2\u055f\u0560\3")
        buf.write("\2\2\2\u0560\u0562\5\u00aaV\2\u0561\u055e\3\2\2\2\u0562")
        buf.write("\u0565\3\2\2\2\u0563\u0561\3\2\2\2\u0563\u0564\3\2\2\2")
        buf.write("\u0564\u00a9\3\2\2\2\u0565\u0563\3\2\2\2\u0566\u0568\7")
        buf.write("\16\2\2\u0567\u0569\7\u0097\2\2\u0568\u0567\3\2\2\2\u0568")
        buf.write("\u0569\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056b\5\u00ae")
        buf.write("X\2\u056b\u00ab\3\2\2\2\u056c\u056e\7\r\2\2\u056d\u056f")
        buf.write("\7\u0097\2\2\u056e\u056d\3\2\2\2\u056e\u056f\3\2\2\2\u056f")
        buf.write("\u0574\3\2\2\2\u0570\u0572\5\u010e\u0088\2\u0571\u0573")
        buf.write("\7\u0097\2\2\u0572\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573")
        buf.write("\u0575\3\2\2\2\u0574\u0570\3\2\2\2\u0574\u0575\3\2\2\2")
        buf.write("\u0575\u0580\3\2\2\2\u0576\u0578\7\17\2\2\u0577\u0579")
        buf.write("\7\u0097\2\2\u0578\u0577\3\2\2\2\u0578\u0579\3\2\2\2\u0579")
        buf.write("\u057e\3\2\2\2\u057a\u057c\5\u010e\u0088\2\u057b\u057d")
        buf.write("\7\u0097\2\2\u057c\u057b\3\2\2\2\u057c\u057d\3\2\2\2\u057d")
        buf.write("\u057f\3\2\2\2\u057e\u057a\3\2\2\2\u057e\u057f\3\2\2\2")
        buf.write("\u057f\u0581\3\2\2\2\u0580\u0576\3\2\2\2\u0580\u0581\3")
        buf.write("\2\2\2\u0581\u00ad\3\2\2\2\u0582\u0583\5\u0112\u008a\2")
        buf.write("\u0583\u00af\3\2\2\2\u0584\u0585\5\u0112\u008a\2\u0585")
        buf.write("\u00b1\3\2\2\2\u0586\u0587\5\u00b4[\2\u0587\u00b3\3\2")
        buf.write("\2\2\u0588\u058f\5\u00b6\\\2\u0589\u058a\7\u0097\2\2\u058a")
        buf.write("\u058b\7h\2\2\u058b\u058c\7\u0097\2\2\u058c\u058e\5\u00b6")
        buf.write("\\\2\u058d\u0589\3\2\2\2\u058e\u0591\3\2\2\2\u058f\u058d")
        buf.write("\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u00b5\3\2\2\2\u0591")
        buf.write("\u058f\3\2\2\2\u0592\u0599\5\u00b8]\2\u0593\u0594\7\u0097")
        buf.write("\2\2\u0594\u0595\7i\2\2\u0595\u0596\7\u0097\2\2\u0596")
        buf.write("\u0598\5\u00b8]\2\u0597\u0593\3\2\2\2\u0598\u059b\3\2")
        buf.write("\2\2\u0599\u0597\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u00b7")
        buf.write("\3\2\2\2\u059b\u0599\3\2\2\2\u059c\u05a3\5\u00ba^\2\u059d")
        buf.write("\u059e\7\u0097\2\2\u059e\u059f\7j\2\2\u059f\u05a0\7\u0097")
        buf.write("\2\2\u05a0\u05a2\5\u00ba^\2\u05a1\u059d\3\2\2\2\u05a2")
        buf.write("\u05a5\3\2\2\2\u05a3\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2")
        buf.write("\u05a4\u00b9\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a6\u05a8\7")
        buf.write("k\2\2\u05a7\u05a9\7\u0097\2\2\u05a8\u05a7\3\2\2\2\u05a8")
        buf.write("\u05a9\3\2\2\2\u05a9\u05ab\3\2\2\2\u05aa\u05a6\3\2\2\2")
        buf.write("\u05ab\u05ae\3\2\2\2\u05ac\u05aa\3\2\2\2\u05ac\u05ad\3")
        buf.write("\2\2\2\u05ad\u05af\3\2\2\2\u05ae\u05ac\3\2\2\2\u05af\u05b0")
        buf.write("\5\u00bc_\2\u05b0\u00bb\3\2\2\2\u05b1\u05b8\5\u00be`\2")
        buf.write("\u05b2\u05b4\7\u0097\2\2\u05b3\u05b2\3\2\2\2\u05b3\u05b4")
        buf.write("\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b7\5\u00dco\2\u05b6")
        buf.write("\u05b3\3\2\2\2\u05b7\u05ba\3\2\2\2\u05b8\u05b6\3\2\2\2")
        buf.write("\u05b8\u05b9\3\2\2\2\u05b9\u00bd\3\2\2\2\u05ba\u05b8\3")
        buf.write("\2\2\2\u05bb\u05ce\5\u00c0a\2\u05bc\u05be\7\u0097\2\2")
        buf.write("\u05bd\u05bc\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u05bf\3")
        buf.write("\2\2\2\u05bf\u05c1\7\20\2\2\u05c0\u05c2\7\u0097\2\2\u05c1")
        buf.write("\u05c0\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c3\3\2\2\2")
        buf.write("\u05c3\u05cd\5\u00c0a\2\u05c4\u05c6\7\u0097\2\2\u05c5")
        buf.write("\u05c4\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c7\3\2\2\2")
        buf.write("\u05c7\u05c9\7\f\2\2\u05c8\u05ca\7\u0097\2\2\u05c9\u05c8")
        buf.write("\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb")
        buf.write("\u05cd\5\u00c0a\2\u05cc\u05bd\3\2\2\2\u05cc\u05c5\3\2")
        buf.write("\2\2\u05cd\u05d0\3\2\2\2\u05ce\u05cc\3\2\2\2\u05ce\u05cf")
        buf.write("\3\2\2\2\u05cf\u00bf\3\2\2\2\u05d0\u05ce\3\2\2\2\u05d1")
        buf.write("\u05ec\5\u00c2b\2\u05d2\u05d4\7\u0097\2\2\u05d3\u05d2")
        buf.write("\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5")
        buf.write("\u05d7\7\r\2\2\u05d6\u05d8\7\u0097\2\2\u05d7\u05d6\3\2")
        buf.write("\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05eb")
        buf.write("\5\u00c2b\2\u05da\u05dc\7\u0097\2\2\u05db\u05da\3\2\2")
        buf.write("\2\u05db\u05dc\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05df")
        buf.write("\7\21\2\2\u05de\u05e0\7\u0097\2\2\u05df\u05de\3\2\2\2")
        buf.write("\u05df\u05e0\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05eb\5")
        buf.write("\u00c2b\2\u05e2\u05e4\7\u0097\2\2\u05e3\u05e2\3\2\2\2")
        buf.write("\u05e3\u05e4\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05e7\7")
        buf.write("\22\2\2\u05e6\u05e8\7\u0097\2\2\u05e7\u05e6\3\2\2\2\u05e7")
        buf.write("\u05e8\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u05eb\5\u00c2")
        buf.write("b\2\u05ea\u05d3\3\2\2\2\u05ea\u05db\3\2\2\2\u05ea\u05e3")
        buf.write("\3\2\2\2\u05eb\u05ee\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ec")
        buf.write("\u05ed\3\2\2\2\u05ed\u00c1\3\2\2\2\u05ee\u05ec\3\2\2\2")
        buf.write("\u05ef\u05fa\5\u00c4c\2\u05f0\u05f2\7\u0097\2\2\u05f1")
        buf.write("\u05f0\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2\u05f3\3\2\2\2")
        buf.write("\u05f3\u05f5\7\23\2\2\u05f4\u05f6\7\u0097\2\2\u05f5\u05f4")
        buf.write("\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7")
        buf.write("\u05f9\5\u00c4c\2\u05f8\u05f1\3\2\2\2\u05f9\u05fc\3\2")
        buf.write("\2\2\u05fa\u05f8\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u00c3")
        buf.write("\3\2\2\2\u05fc\u05fa\3\2\2\2\u05fd\u05ff\t\4\2\2\u05fe")
        buf.write("\u0600\7\u0097\2\2\u05ff\u05fe\3\2\2\2\u05ff\u0600\3\2")
        buf.write("\2\2\u0600\u0602\3\2\2\2\u0601\u05fd\3\2\2\2\u0602\u0605")
        buf.write("\3\2\2\2\u0603\u0601\3\2\2\2\u0603\u0604\3\2\2\2\u0604")
        buf.write("\u0606\3\2\2\2\u0605\u0603\3\2\2\2\u0606\u0607\5\u00c6")
        buf.write("d\2\u0607\u00c5\3\2\2\2\u0608\u060e\5\u00d0i\2\u0609\u060d")
        buf.write("\5\u00caf\2\u060a\u060d\5\u00c8e\2\u060b\u060d\5\u00cc")
        buf.write("g\2\u060c\u0609\3\2\2\2\u060c\u060a\3\2\2\2\u060c\u060b")
        buf.write("\3\2\2\2\u060d\u0610\3\2\2\2\u060e\u060c\3\2\2\2\u060e")
        buf.write("\u060f\3\2\2\2\u060f\u00c7\3\2\2\2\u0610\u060e\3\2\2\2")
        buf.write("\u0611\u0612\7\u0097\2\2\u0612\u0614\7R\2\2\u0613\u0615")
        buf.write("\7\u0097\2\2\u0614\u0613\3\2\2\2\u0614\u0615\3\2\2\2\u0615")
        buf.write("\u0616\3\2\2\2\u0616\u062b\5\u00d0i\2\u0617\u0619\7\u0097")
        buf.write("\2\2\u0618\u0617\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u061a")
        buf.write("\3\2\2\2\u061a\u061b\7\7\2\2\u061b\u061c\5\u00b2Z\2\u061c")
        buf.write("\u061d\7\b\2\2\u061d\u062b\3\2\2\2\u061e\u0620\7\u0097")
        buf.write("\2\2\u061f\u061e\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u0621")
        buf.write("\3\2\2\2\u0621\u0623\7\7\2\2\u0622\u0624\5\u00b2Z\2\u0623")
        buf.write("\u0622\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u0625\3\2\2\2")
        buf.write("\u0625\u0627\7\17\2\2\u0626\u0628\5\u00b2Z\2\u0627\u0626")
        buf.write("\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u0629\3\2\2\2\u0629")
        buf.write("\u062b\7\b\2\2\u062a\u0611\3\2\2\2\u062a\u0618\3\2\2\2")
        buf.write("\u062a\u061f\3\2\2\2\u062b\u00c9\3\2\2\2\u062c\u0638\5")
        buf.write("\u00ceh\2\u062d\u062e\7\u0097\2\2\u062e\u062f\7l\2\2\u062f")
        buf.write("\u0630\7\u0097\2\2\u0630\u0638\7D\2\2\u0631\u0632\7\u0097")
        buf.write("\2\2\u0632\u0633\7m\2\2\u0633\u0634\7\u0097\2\2\u0634")
        buf.write("\u0638\7D\2\2\u0635\u0636\7\u0097\2\2\u0636\u0638\7n\2")
        buf.write("\2\u0637\u062c\3\2\2\2\u0637\u062d\3\2\2\2\u0637\u0631")
        buf.write("\3\2\2\2\u0637\u0635\3\2\2\2\u0638\u063a\3\2\2\2\u0639")
        buf.write("\u063b\7\u0097\2\2\u063a\u0639\3\2\2\2\u063a\u063b\3\2")
        buf.write("\2\2\u063b\u063c\3\2\2\2\u063c\u063d\5\u00d0i\2\u063d")
        buf.write("\u00cb\3\2\2\2\u063e\u063f\7\u0097\2\2\u063f\u0640\7?")
        buf.write("\2\2\u0640\u0641\7\u0097\2\2\u0641\u0649\7o\2\2\u0642")
        buf.write("\u0643\7\u0097\2\2\u0643\u0644\7?\2\2\u0644\u0645\7\u0097")
        buf.write("\2\2\u0645\u0646\7k\2\2\u0646\u0647\7\u0097\2\2\u0647")
        buf.write("\u0649\7o\2\2\u0648\u063e\3\2\2\2\u0648\u0642\3\2\2\2")
        buf.write("\u0649\u00cd\3\2\2\2\u064a\u064c\7\u0097\2\2\u064b\u064a")
        buf.write("\3\2\2\2\u064b\u064c\3\2\2\2\u064c\u064d\3\2\2\2\u064d")
        buf.write("\u064e\7\24\2\2\u064e\u00cf\3\2\2\2\u064f\u0656\5\u00d2")
        buf.write("j\2\u0650\u0652\7\u0097\2\2\u0651\u0650\3\2\2\2\u0651")
        buf.write("\u0652\3\2\2\2\u0652\u0653\3\2\2\2\u0653\u0655\5\u00fa")
        buf.write("~\2\u0654\u0651\3\2\2\2\u0655\u0658\3\2\2\2\u0656\u0654")
        buf.write("\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u065d\3\2\2\2\u0658")
        buf.write("\u0656\3\2\2\2\u0659\u065b\7\u0097\2\2\u065a\u0659\3\2")
        buf.write("\2\2\u065a\u065b\3\2\2\2\u065b\u065c\3\2\2\2\u065c\u065e")
        buf.write("\5\u00a8U\2\u065d\u065a\3\2\2\2\u065d\u065e\3\2\2\2\u065e")
        buf.write("\u00d1\3\2\2\2\u065f\u06b2\5\u00d4k\2\u0660\u06b2\5\u0108")
        buf.write("\u0085\2\u0661\u06b2\5\u0106\u0084\2\u0662\u06b2\5\u00fc")
        buf.write("\177\2\u0663\u0665\7p\2\2\u0664\u0666\7\u0097\2\2\u0665")
        buf.write("\u0664\3\2\2\2\u0665\u0666\3\2\2\2\u0666\u0667\3\2\2\2")
        buf.write("\u0667\u0669\7\5\2\2\u0668\u066a\7\u0097\2\2\u0669\u0668")
        buf.write("\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066b\3\2\2\2\u066b")
        buf.write("\u066d\7\r\2\2\u066c\u066e\7\u0097\2\2\u066d\u066c\3\2")
        buf.write("\2\2\u066d\u066e\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u06b2")
        buf.write("\7\6\2\2\u0670\u06b2\5\u00f6|\2\u0671\u06b2\5\u00f8}\2")
        buf.write("\u0672\u06b2\5\u00e4s\2\u0673\u06b2\5\u00dan\2\u0674\u0676")
        buf.write("\78\2\2\u0675\u0677\7\u0097\2\2\u0676\u0675\3\2\2\2\u0676")
        buf.write("\u0677\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u067a\7\5\2\2")
        buf.write("\u0679\u067b\7\u0097\2\2\u067a\u0679\3\2\2\2\u067a\u067b")
        buf.write("\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067e\5\u00e2r\2\u067d")
        buf.write("\u067f\7\u0097\2\2\u067e\u067d\3\2\2\2\u067e\u067f\3\2")
        buf.write("\2\2\u067f\u0680\3\2\2\2\u0680\u0681\7\6\2\2\u0681\u06b2")
        buf.write("\3\2\2\2\u0682\u0684\7q\2\2\u0683\u0685\7\u0097\2\2\u0684")
        buf.write("\u0683\3\2\2\2\u0684\u0685\3\2\2\2\u0685\u0686\3\2\2\2")
        buf.write("\u0686\u0688\7\5\2\2\u0687\u0689\7\u0097\2\2\u0688\u0687")
        buf.write("\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u068a\3\2\2\2\u068a")
        buf.write("\u068c\5\u00e2r\2\u068b\u068d\7\u0097\2\2\u068c\u068b")
        buf.write("\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u068e\3\2\2\2\u068e")
        buf.write("\u068f\7\6\2\2\u068f\u06b2\3\2\2\2\u0690\u0692\7r\2\2")
        buf.write("\u0691\u0693\7\u0097\2\2\u0692\u0691\3\2\2\2\u0692\u0693")
        buf.write("\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0696\7\5\2\2\u0695")
        buf.write("\u0697\7\u0097\2\2\u0696\u0695\3\2\2\2\u0696\u0697\3\2")
        buf.write("\2\2\u0697\u0698\3\2\2\2\u0698\u069a\5\u00e2r\2\u0699")
        buf.write("\u069b\7\u0097\2\2\u069a\u0699\3\2\2\2\u069a\u069b\3\2")
        buf.write("\2\2\u069b\u069c\3\2\2\2\u069c\u069d\7\6\2\2\u069d\u06b2")
        buf.write("\3\2\2\2\u069e\u06a0\7s\2\2\u069f\u06a1\7\u0097\2\2\u06a0")
        buf.write("\u069f\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a2\3\2\2\2")
        buf.write("\u06a2\u06a4\7\5\2\2\u06a3\u06a5\7\u0097\2\2\u06a4\u06a3")
        buf.write("\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6")
        buf.write("\u06a8\5\u00e2r\2\u06a7\u06a9\7\u0097\2\2\u06a8\u06a7")
        buf.write("\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa")
        buf.write("\u06ab\7\6\2\2\u06ab\u06b2\3\2\2\2\u06ac\u06b2\5\u0096")
        buf.write("L\2\u06ad\u06b2\5\u00e0q\2\u06ae\u06b2\5\u00dep\2\u06af")
        buf.write("\u06b2\5\u00e8u\2\u06b0\u06b2\5\u0100\u0081\2\u06b1\u065f")
        buf.write("\3\2\2\2\u06b1\u0660\3\2\2\2\u06b1\u0661\3\2\2\2\u06b1")
        buf.write("\u0662\3\2\2\2\u06b1\u0663\3\2\2\2\u06b1\u0670\3\2\2\2")
        buf.write("\u06b1\u0671\3\2\2\2\u06b1\u0672\3\2\2\2\u06b1\u0673\3")
        buf.write("\2\2\2\u06b1\u0674\3\2\2\2\u06b1\u0682\3\2\2\2\u06b1\u0690")
        buf.write("\3\2\2\2\u06b1\u069e\3\2\2\2\u06b1\u06ac\3\2\2\2\u06b1")
        buf.write("\u06ad\3\2\2\2\u06b1\u06ae\3\2\2\2\u06b1\u06af\3\2\2\2")
        buf.write("\u06b1\u06b0\3\2\2\2\u06b2\u00d3\3\2\2\2\u06b3\u06ba\5")
        buf.write("\u0102\u0082\2\u06b4\u06ba\7~\2\2\u06b5\u06ba\5\u00d6")
        buf.write("l\2\u06b6\u06ba\7o\2\2\u06b7\u06ba\5\u0104\u0083\2\u06b8")
        buf.write("\u06ba\5\u00d8m\2\u06b9\u06b3\3\2\2\2\u06b9\u06b4\3\2")
        buf.write("\2\2\u06b9\u06b5\3\2\2\2\u06b9\u06b6\3\2\2\2\u06b9\u06b7")
        buf.write("\3\2\2\2\u06b9\u06b8\3\2\2\2\u06ba\u00d5\3\2\2\2\u06bb")
        buf.write("\u06bc\t\5\2\2\u06bc\u00d7\3\2\2\2\u06bd\u06bf\7\7\2\2")
        buf.write("\u06be\u06c0\7\u0097\2\2\u06bf\u06be\3\2\2\2\u06bf\u06c0")
        buf.write("\3\2\2\2\u06c0\u06d2\3\2\2\2\u06c1\u06c3\5\u00b2Z\2\u06c2")
        buf.write("\u06c4\7\u0097\2\2\u06c3\u06c2\3\2\2\2\u06c3\u06c4\3\2")
        buf.write("\2\2\u06c4\u06cf\3\2\2\2\u06c5\u06c7\7\t\2\2\u06c6\u06c8")
        buf.write("\7\u0097\2\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8")
        buf.write("\u06c9\3\2\2\2\u06c9\u06cb\5\u00b2Z\2\u06ca\u06cc\7\u0097")
        buf.write("\2\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06ce")
        buf.write("\3\2\2\2\u06cd\u06c5\3\2\2\2\u06ce\u06d1\3\2\2\2\u06cf")
        buf.write("\u06cd\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d3\3\2\2\2")
        buf.write("\u06d1\u06cf\3\2\2\2\u06d2\u06c1\3\2\2\2\u06d2\u06d3\3")
        buf.write("\2\2\2\u06d3\u06d4\3\2\2\2\u06d4\u06d5\7\b\2\2\u06d5\u00d9")
        buf.write("\3\2\2\2\u06d6\u06d8\7v\2\2\u06d7\u06d9\7\u0097\2\2\u06d8")
        buf.write("\u06d7\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06da\3\2\2\2")
        buf.write("\u06da\u06db\7\5\2\2\u06db\u06dc\5\u0100\u0081\2\u06dc")
        buf.write("\u06dd\7\4\2\2\u06dd\u06de\5\u00b2Z\2\u06de\u06df\7\t")
        buf.write("\2\2\u06df\u06e0\5\u00e6t\2\u06e0\u06e1\7\13\2\2\u06e1")
        buf.write("\u06e2\5\u00b2Z\2\u06e2\u06e3\7\6\2\2\u06e3\u00db\3\2")
        buf.write("\2\2\u06e4\u06e6\7\4\2\2\u06e5\u06e7\7\u0097\2\2\u06e6")
        buf.write("\u06e5\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u06e8\3\2\2\2")
        buf.write("\u06e8\u0703\5\u00be`\2\u06e9\u06eb\7\25\2\2\u06ea\u06ec")
        buf.write("\7\u0097\2\2\u06eb\u06ea\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec")
        buf.write("\u06ed\3\2\2\2\u06ed\u0703\5\u00be`\2\u06ee\u06f0\7\26")
        buf.write("\2\2\u06ef\u06f1\7\u0097\2\2\u06f0\u06ef\3\2\2\2\u06f0")
        buf.write("\u06f1\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u0703\5\u00be")
        buf.write("`\2\u06f3\u06f5\7\27\2\2\u06f4\u06f6\7\u0097\2\2\u06f5")
        buf.write("\u06f4\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06f7\3\2\2\2")
        buf.write("\u06f7\u0703\5\u00be`\2\u06f8\u06fa\7\30\2\2\u06f9\u06fb")
        buf.write("\7\u0097\2\2\u06fa\u06f9\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb")
        buf.write("\u06fc\3\2\2\2\u06fc\u0703\5\u00be`\2\u06fd\u06ff\7\31")
        buf.write("\2\2\u06fe\u0700\7\u0097\2\2\u06ff\u06fe\3\2\2\2\u06ff")
        buf.write("\u0700\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u0703\5\u00be")
        buf.write("`\2\u0702\u06e4\3\2\2\2\u0702\u06e9\3\2\2\2\u0702\u06ee")
        buf.write("\3\2\2\2\u0702\u06f3\3\2\2\2\u0702\u06f8\3\2\2\2\u0702")
        buf.write("\u06fd\3\2\2\2\u0703\u00dd\3\2\2\2\u0704\u0706\7\5\2\2")
        buf.write("\u0705\u0707\7\u0097\2\2\u0706\u0705\3\2\2\2\u0706\u0707")
        buf.write("\3\2\2\2\u0707\u0708\3\2\2\2\u0708\u070a\5\u00b2Z\2\u0709")
        buf.write("\u070b\7\u0097\2\2\u070a\u0709\3\2\2\2\u070a\u070b\3\2")
        buf.write("\2\2\u070b\u070c\3\2\2\2\u070c\u070d\7\6\2\2\u070d\u00df")
        buf.write("\3\2\2\2\u070e\u0713\5\u009aN\2\u070f\u0711\7\u0097\2")
        buf.write("\2\u0710\u070f\3\2\2\2\u0710\u0711\3\2\2\2\u0711\u0712")
        buf.write("\3\2\2\2\u0712\u0714\5\u009cO\2\u0713\u0710\3\2\2\2\u0714")
        buf.write("\u0715\3\2\2\2\u0715\u0713\3\2\2\2\u0715\u0716\3\2\2\2")
        buf.write("\u0716\u00e1\3\2\2\2\u0717\u071c\5\u00e6t\2\u0718\u071a")
        buf.write("\7\u0097\2\2\u0719\u0718\3\2\2\2\u0719\u071a\3\2\2\2\u071a")
        buf.write("\u071b\3\2\2\2\u071b\u071d\5\u008eH\2\u071c\u0719\3\2")
        buf.write("\2\2\u071c\u071d\3\2\2\2\u071d\u00e3\3\2\2\2\u071e\u0720")
        buf.write("\7w\2\2\u071f\u0721\7\u0097\2\2\u0720\u071f\3\2\2\2\u0720")
        buf.write("\u0721\3\2\2\2\u0721\u0722\3\2\2\2\u0722\u0724\7\5\2\2")
        buf.write("\u0723\u0725\7\u0097\2\2\u0724\u0723\3\2\2\2\u0724\u0725")
        buf.write("\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0728\5\u00e2r\2\u0727")
        buf.write("\u0729\7\u0097\2\2\u0728\u0727\3\2\2\2\u0728\u0729\3\2")
        buf.write("\2\2\u0729\u072a\3\2\2\2\u072a\u072b\7\6\2\2\u072b\u0742")
        buf.write("\3\2\2\2\u072c\u072e\7x\2\2\u072d\u072f\7\u0097\2\2\u072e")
        buf.write("\u072d\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u0730\3\2\2\2")
        buf.write("\u0730\u0732\7\5\2\2\u0731\u0733\7\u0097\2\2\u0732\u0731")
        buf.write("\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0734\3\2\2\2\u0734")
        buf.write("\u0736\5\u00e2r\2\u0735\u0737\7\u0097\2\2\u0736\u0735")
        buf.write("\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u073d\3\2\2\2\u0738")
        buf.write("\u073a\7\u0097\2\2\u0739\u0738\3\2\2\2\u0739\u073a\3\2")
        buf.write("\2\2\u073a\u073b\3\2\2\2\u073b\u073c\7\13\2\2\u073c\u073e")
        buf.write("\5\u00b2Z\2\u073d\u0739\3\2\2\2\u073d\u073e\3\2\2\2\u073e")
        buf.write("\u073f\3\2\2\2\u073f\u0740\7\6\2\2\u0740\u0742\3\2\2\2")
        buf.write("\u0741\u071e\3\2\2\2\u0741\u072c\3\2\2\2\u0742\u00e5\3")
        buf.write("\2\2\2\u0743\u0744\5\u0100\u0081\2\u0744\u0745\7\u0097")
        buf.write("\2\2\u0745\u0746\7R\2\2\u0746\u0747\7\u0097\2\2\u0747")
        buf.write("\u0748\5\u00b2Z\2\u0748\u00e7\3\2\2\2\u0749\u074b\5\u00ea")
        buf.write("v\2\u074a\u074c\7\u0097\2\2\u074b\u074a\3\2\2\2\u074b")
        buf.write("\u074c\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074f\7\5\2\2")
        buf.write("\u074e\u0750\7\u0097\2\2\u074f\u074e\3\2\2\2\u074f\u0750")
        buf.write("\3\2\2\2\u0750\u0755\3\2\2\2\u0751\u0753\7U\2\2\u0752")
        buf.write("\u0754\7\u0097\2\2\u0753\u0752\3\2\2\2\u0753\u0754\3\2")
        buf.write("\2\2\u0754\u0756\3\2\2\2\u0755\u0751\3\2\2\2\u0755\u0756")
        buf.write("\3\2\2\2\u0756\u0768\3\2\2\2\u0757\u0759\5\u00b2Z\2\u0758")
        buf.write("\u075a\7\u0097\2\2\u0759\u0758\3\2\2\2\u0759\u075a\3\2")
        buf.write("\2\2\u075a\u0765\3\2\2\2\u075b\u075d\7\t\2\2\u075c\u075e")
        buf.write("\7\u0097\2\2\u075d\u075c\3\2\2\2\u075d\u075e\3\2\2\2\u075e")
        buf.write("\u075f\3\2\2\2\u075f\u0761\5\u00b2Z\2\u0760\u0762\7\u0097")
        buf.write("\2\2\u0761\u0760\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u0764")
        buf.write("\3\2\2\2\u0763\u075b\3\2\2\2\u0764\u0767\3\2\2\2\u0765")
        buf.write("\u0763\3\2\2\2\u0765\u0766\3\2\2\2\u0766\u0769\3\2\2\2")
        buf.write("\u0767\u0765\3\2\2\2\u0768\u0757\3\2\2\2\u0768\u0769\3")
        buf.write("\2\2\2\u0769\u076a\3\2\2\2\u076a\u076b\7\6\2\2\u076b\u00e9")
        buf.write("\3\2\2\2\u076c\u076d\5\u00f4{\2\u076d\u076e\5\u0116\u008c")
        buf.write("\2\u076e\u0771\3\2\2\2\u076f\u0771\7A\2\2\u0770\u076c")
        buf.write("\3\2\2\2\u0770\u076f\3\2\2\2\u0771\u00eb\3\2\2\2\u0772")
        buf.write("\u0774\5\u00f2z\2\u0773\u0775\7\u0097\2\2\u0774\u0773")
        buf.write("\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0776\3\2\2\2\u0776")
        buf.write("\u0778\7\5\2\2\u0777\u0779\7\u0097\2\2\u0778\u0777\3\2")
        buf.write("\2\2\u0778\u0779\3\2\2\2\u0779\u078b\3\2\2\2\u077a\u077c")
        buf.write("\5\u00b2Z\2\u077b\u077d\7\u0097\2\2\u077c\u077b\3\2\2")
        buf.write("\2\u077c\u077d\3\2\2\2\u077d\u0788\3\2\2\2\u077e\u0780")
        buf.write("\7\t\2\2\u077f\u0781\7\u0097\2\2\u0780\u077f\3\2\2\2\u0780")
        buf.write("\u0781\3\2\2\2\u0781\u0782\3\2\2\2\u0782\u0784\5\u00b2")
        buf.write("Z\2\u0783\u0785\7\u0097\2\2\u0784\u0783\3\2\2\2\u0784")
        buf.write("\u0785\3\2\2\2\u0785\u0787\3\2\2\2\u0786\u077e\3\2\2\2")
        buf.write("\u0787\u078a\3\2\2\2\u0788\u0786\3\2\2\2\u0788\u0789\3")
        buf.write("\2\2\2\u0789\u078c\3\2\2\2\u078a\u0788\3\2\2\2\u078b\u077a")
        buf.write("\3\2\2\2\u078b\u078c\3\2\2\2\u078c\u078d\3\2\2\2\u078d")
        buf.write("\u078e\7\6\2\2\u078e\u00ed\3\2\2\2\u078f\u0790\5\u00f2")
        buf.write("z\2\u0790\u00ef\3\2\2\2\u0791\u0792\5\u0116\u008c\2\u0792")
        buf.write("\u00f1\3\2\2\2\u0793\u0794\5\u00f4{\2\u0794\u0795\5\u0116")
        buf.write("\u008c\2\u0795\u00f3\3\2\2\2\u0796\u0797\5\u0116\u008c")
        buf.write("\2\u0797\u0798\7\32\2\2\u0798\u079a\3\2\2\2\u0799\u0796")
        buf.write("\3\2\2\2\u079a\u079d\3\2\2\2\u079b\u0799\3\2\2\2\u079b")
        buf.write("\u079c\3\2\2\2\u079c\u00f5\3\2\2\2\u079d\u079b\3\2\2\2")
        buf.write("\u079e\u07a0\7\7\2\2\u079f\u07a1\7\u0097\2\2\u07a0\u079f")
        buf.write("\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2")
        buf.write("\u07ab\5\u00e2r\2\u07a3\u07a5\7\u0097\2\2\u07a4\u07a3")
        buf.write("\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6")
        buf.write("\u07a8\7\13\2\2\u07a7\u07a9\7\u0097\2\2\u07a8\u07a7\3")
        buf.write("\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07ac")
        buf.write("\5\u00b2Z\2\u07ab\u07a4\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac")
        buf.write("\u07ae\3\2\2\2\u07ad\u07af\7\u0097\2\2\u07ae\u07ad\3\2")
        buf.write("\2\2\u07ae\u07af\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0\u07b1")
        buf.write("\7\b\2\2\u07b1\u00f7\3\2\2\2\u07b2\u07b4\7\7\2\2\u07b3")
        buf.write("\u07b5\7\u0097\2\2\u07b4\u07b3\3\2\2\2\u07b4\u07b5\3\2")
        buf.write("\2\2\u07b5\u07be\3\2\2\2\u07b6\u07b8\5\u0100\u0081\2\u07b7")
        buf.write("\u07b9\7\u0097\2\2\u07b8\u07b7\3\2\2\2\u07b8\u07b9\3\2")
        buf.write("\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07bc\7\4\2\2\u07bb\u07bd")
        buf.write("\7\u0097\2\2\u07bc\u07bb\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd")
        buf.write("\u07bf\3\2\2\2\u07be\u07b6\3\2\2\2\u07be\u07bf\3\2\2\2")
        buf.write("\u07bf\u07c0\3\2\2\2\u07c0\u07c2\5\u00e0q\2\u07c1\u07c3")
        buf.write("\7\u0097\2\2\u07c2\u07c1\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3")
        buf.write("\u07cc\3\2\2\2\u07c4\u07c6\7e\2\2\u07c5\u07c7\7\u0097")
        buf.write("\2\2\u07c6\u07c5\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07c8")
        buf.write("\3\2\2\2\u07c8\u07ca\5\u00b2Z\2\u07c9\u07cb\7\u0097\2")
        buf.write("\2\u07ca\u07c9\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07cd")
        buf.write("\3\2\2\2\u07cc\u07c4\3\2\2\2\u07cc\u07cd\3\2\2\2\u07cd")
        buf.write("\u07ce\3\2\2\2\u07ce\u07d0\7\13\2\2\u07cf\u07d1\7\u0097")
        buf.write("\2\2\u07d0\u07cf\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u07d2")
        buf.write("\3\2\2\2\u07d2\u07d4\5\u00b2Z\2\u07d3\u07d5\7\u0097\2")
        buf.write("\2\u07d4\u07d3\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5\u07d6")
        buf.write("\3\2\2\2\u07d6\u07d7\7\b\2\2\u07d7\u00f9\3\2\2\2\u07d8")
        buf.write("\u07da\7\32\2\2\u07d9\u07db\7\u0097\2\2\u07da\u07d9\3")
        buf.write("\2\2\2\u07da\u07db\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07dd")
        buf.write("\5\u010c\u0087\2\u07dd\u00fb\3\2\2\2\u07de\u07e3\7y\2")
        buf.write("\2\u07df\u07e1\7\u0097\2\2\u07e0\u07df\3\2\2\2\u07e0\u07e1")
        buf.write("\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e4\5\u00fe\u0080")
        buf.write("\2\u07e3\u07e0\3\2\2\2\u07e4\u07e5\3\2\2\2\u07e5\u07e3")
        buf.write("\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07f5\3\2\2\2\u07e7")
        buf.write("\u07e9\7y\2\2\u07e8\u07ea\7\u0097\2\2\u07e9\u07e8\3\2")
        buf.write("\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u07f0")
        buf.write("\5\u00b2Z\2\u07ec\u07ee\7\u0097\2\2\u07ed\u07ec\3\2\2")
        buf.write("\2\u07ed\u07ee\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef\u07f1")
        buf.write("\5\u00fe\u0080\2\u07f0\u07ed\3\2\2\2\u07f1\u07f2\3\2\2")
        buf.write("\2\u07f2\u07f0\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f5")
        buf.write("\3\2\2\2\u07f4\u07de\3\2\2\2\u07f4\u07e7\3\2\2\2\u07f5")
        buf.write("\u07fe\3\2\2\2\u07f6\u07f8\7\u0097\2\2\u07f7\u07f6\3\2")
        buf.write("\2\2\u07f7\u07f8\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u07fb")
        buf.write("\7z\2\2\u07fa\u07fc\7\u0097\2\2\u07fb\u07fa\3\2\2\2\u07fb")
        buf.write("\u07fc\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fd\u07ff\5\u00b2")
        buf.write("Z\2\u07fe\u07f7\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0801")
        buf.write("\3\2\2\2\u0800\u0802\7\u0097\2\2\u0801\u0800\3\2\2\2\u0801")
        buf.write("\u0802\3\2\2\2\u0802\u0803\3\2\2\2\u0803\u0804\7{\2\2")
        buf.write("\u0804\u00fd\3\2\2\2\u0805\u0807\7|\2\2\u0806\u0808\7")
        buf.write("\u0097\2\2\u0807\u0806\3\2\2\2\u0807\u0808\3\2\2\2\u0808")
        buf.write("\u0809\3\2\2\2\u0809\u080b\5\u00b2Z\2\u080a\u080c\7\u0097")
        buf.write("\2\2\u080b\u080a\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d")
        buf.write("\3\2\2\2\u080d\u080f\7}\2\2\u080e\u0810\7\u0097\2\2\u080f")
        buf.write("\u080e\3\2\2\2\u080f\u0810\3\2\2\2\u0810\u0811\3\2\2\2")
        buf.write("\u0811\u0812\5\u00b2Z\2\u0812\u00ff\3\2\2\2\u0813\u0814")
        buf.write("\5\u0116\u008c\2\u0814\u0101\3\2\2\2\u0815\u0818\5\u0110")
        buf.write("\u0089\2\u0816\u0818\5\u010e\u0088\2\u0817\u0815\3\2\2")
        buf.write("\2\u0817\u0816\3\2\2\2\u0818\u0103\3\2\2\2\u0819\u081b")
        buf.write("\7\33\2\2\u081a\u081c\7\u0097\2\2\u081b\u081a\3\2\2\2")
        buf.write("\u081b\u081c\3\2\2\2\u081c\u083e\3\2\2\2\u081d\u081f\5")
        buf.write("\u010c\u0087\2\u081e\u0820\7\u0097\2\2\u081f\u081e\3\2")
        buf.write("\2\2\u081f\u0820\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u0823")
        buf.write("\7\16\2\2\u0822\u0824\7\u0097\2\2\u0823\u0822\3\2\2\2")
        buf.write("\u0823\u0824\3\2\2\2\u0824\u0825\3\2\2\2\u0825\u0827\5")
        buf.write("\u00b2Z\2\u0826\u0828\7\u0097\2\2\u0827\u0826\3\2\2\2")
        buf.write("\u0827\u0828\3\2\2\2\u0828\u083b\3\2\2\2\u0829\u082b\7")
        buf.write("\t\2\2\u082a\u082c\7\u0097\2\2\u082b\u082a\3\2\2\2\u082b")
        buf.write("\u082c\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u082f\5\u010c")
        buf.write("\u0087\2\u082e\u0830\7\u0097\2\2\u082f\u082e\3\2\2\2\u082f")
        buf.write("\u0830\3\2\2\2\u0830\u0831\3\2\2\2\u0831\u0833\7\16\2")
        buf.write("\2\u0832\u0834\7\u0097\2\2\u0833\u0832\3\2\2\2\u0833\u0834")
        buf.write("\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0837\5\u00b2Z\2\u0836")
        buf.write("\u0838\7\u0097\2\2\u0837\u0836\3\2\2\2\u0837\u0838\3\2")
        buf.write("\2\2\u0838\u083a\3\2\2\2\u0839\u0829\3\2\2\2\u083a\u083d")
        buf.write("\3\2\2\2\u083b\u0839\3\2\2\2\u083b\u083c\3\2\2\2\u083c")
        buf.write("\u083f\3\2\2\2\u083d\u083b\3\2\2\2\u083e\u081d\3\2\2\2")
        buf.write("\u083e\u083f\3\2\2\2\u083f\u0840\3\2\2\2\u0840\u0841\7")
        buf.write("\34\2\2\u0841\u0105\3\2\2\2\u0842\u0844\7\33\2\2\u0843")
        buf.write("\u0845\7\u0097\2\2\u0844\u0843\3\2\2\2\u0844\u0845\3\2")
        buf.write("\2\2\u0845\u0848\3\2\2\2\u0846\u0849\5\u0116\u008c\2\u0847")
        buf.write("\u0849\7\u0081\2\2\u0848\u0846\3\2\2\2\u0848\u0847\3\2")
        buf.write("\2\2\u0849\u084b\3\2\2\2\u084a\u084c\7\u0097\2\2\u084b")
        buf.write("\u084a\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u084d\3\2\2\2")
        buf.write("\u084d\u084e\7\34\2\2\u084e\u0107\3\2\2\2\u084f\u0852")
        buf.write("\7\35\2\2\u0850\u0853\5\u0116\u008c\2\u0851\u0853\7\u0081")
        buf.write("\2\2\u0852\u0850\3\2\2\2\u0852\u0851\3\2\2\2\u0853\u0109")
        buf.write("\3\2\2\2\u0854\u0859\5\u00d2j\2\u0855\u0857\7\u0097\2")
        buf.write("\2\u0856\u0855\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0858")
        buf.write("\3\2\2\2\u0858\u085a\5\u00fa~\2\u0859\u0856\3\2\2\2\u085a")
        buf.write("\u085b\3\2\2\2\u085b\u0859\3\2\2\2\u085b\u085c\3\2\2\2")
        buf.write("\u085c\u010b\3\2\2\2\u085d\u085e\5\u0112\u008a\2\u085e")
        buf.write("\u010d\3\2\2\2\u085f\u0860\t\6\2\2\u0860\u010f\3\2\2\2")
        buf.write("\u0861\u0862\t\7\2\2\u0862\u0111\3\2\2\2\u0863\u0866\5")
        buf.write("\u0116\u008c\2\u0864\u0866\5\u0114\u008b\2\u0865\u0863")
        buf.write("\3\2\2\2\u0865\u0864\3\2\2\2\u0866\u0113\3\2\2\2\u0867")
        buf.write("\u0868\t\b\2\2\u0868\u0115\3\2\2\2\u0869\u086a\t\t\2\2")
        buf.write("\u086a\u0117\3\2\2\2\u086b\u086c\t\n\2\2\u086c\u0119\3")
        buf.write("\2\2\2\u086d\u086e\t\13\2\2\u086e\u011b\3\2\2\2\u086f")
        buf.write("\u0870\t\f\2\2\u0870\u011d\3\2\2\2\u0167\u011f\u0124\u0127")
        buf.write("\u012a\u0130\u0134\u013a\u013f\u0145\u0150\u0154\u015a")
        buf.write("\u015f\u0163\u0168\u016d\u0178\u0181\u0186\u0189\u018d")
        buf.write("\u0191\u0195\u019b\u019f\u01a4\u01a9\u01ad\u01b0\u01b2")
        buf.write("\u01b6\u01ba\u01bf\u01c3\u01c8\u01cc\u01d7\u01de\u01e8")
        buf.write("\u020e\u0219\u0220\u022e\u0235\u023b\u0245\u0249\u024f")
        buf.write("\u0257\u0262\u0268\u0274\u027a\u0286\u028a\u0294\u02a1")
        buf.write("\u02a5\u02a9\u02af\u02b3\u02b6\u02ba\u02c4\u02cb\u02d8")
        buf.write("\u02dc\u02e4\u02ea\u02f1\u02f6\u02fa\u0300\u0304\u030a")
        buf.write("\u030e\u0314\u0318\u031c\u0320\u0324\u0328\u032d\u0334")
        buf.write("\u0338\u033d\u0344\u0348\u034c\u0354\u035b\u035e\u0366")
        buf.write("\u036b\u0371\u0377\u037b\u037f\u0384\u0388\u038f\u0395")
        buf.write("\u0398\u039d\u03a0\u03a4\u03a7\u03af\u03b3\u03b7\u03bb")
        buf.write("\u03bf\u03c4\u03c9\u03cd\u03d2\u03d5\u03de\u03e7\u03ec")
        buf.write("\u03f9\u03fc\u03ff\u0413\u0417\u041c\u0426\u042c\u0430")
        buf.write("\u0435\u0439\u043d\u0441\u0447\u044b\u0450\u0456\u045f")
        buf.write("\u0468\u0470\u0476\u047a\u047f\u0488\u048c\u0491\u0496")
        buf.write("\u049a\u049f\u04a3\u04af\u04b3\u04b8\u04bf\u04c3\u04c7")
        buf.write("\u04c9\u04cd\u04cf\u04d3\u04d5\u04db\u04e1\u04e5\u04e8")
        buf.write("\u04eb\u04ef\u04f5\u04f9\u04fc\u04ff\u0505\u0508\u050b")
        buf.write("\u050f\u0515\u0518\u051b\u051f\u0523\u0527\u0529\u052d")
        buf.write("\u052f\u0532\u0536\u0538\u053f\u0543\u0549\u054d\u0551")
        buf.write("\u0554\u0559\u055e\u0563\u0568\u056e\u0572\u0574\u0578")
        buf.write("\u057c\u057e\u0580\u058f\u0599\u05a3\u05a8\u05ac\u05b3")
        buf.write("\u05b8\u05bd\u05c1\u05c5\u05c9\u05cc\u05ce\u05d3\u05d7")
        buf.write("\u05db\u05df\u05e3\u05e7\u05ea\u05ec\u05f1\u05f5\u05fa")
        buf.write("\u05ff\u0603\u060c\u060e\u0614\u0618\u061f\u0623\u0627")
        buf.write("\u062a\u0637\u063a\u0648\u064b\u0651\u0656\u065a\u065d")
        buf.write("\u0665\u0669\u066d\u0676\u067a\u067e\u0684\u0688\u068c")
        buf.write("\u0692\u0696\u069a\u06a0\u06a4\u06a8\u06b1\u06b9\u06bf")
        buf.write("\u06c3\u06c7\u06cb\u06cf\u06d2\u06d8\u06e6\u06eb\u06f0")
        buf.write("\u06f5\u06fa\u06ff\u0702\u0706\u070a\u0710\u0715\u0719")
        buf.write("\u071c\u0720\u0724\u0728\u072e\u0732\u0736\u0739\u073d")
        buf.write("\u0741\u074b\u074f\u0753\u0755\u0759\u075d\u0761\u0765")
        buf.write("\u0768\u0770\u0774\u0778\u077c\u0780\u0784\u0788\u078b")
        buf.write("\u079b\u07a0\u07a4\u07a8\u07ab\u07ae\u07b4\u07b8\u07bc")
        buf.write("\u07be\u07c2\u07c6\u07ca\u07cc\u07d0\u07d4\u07da\u07e0")
        buf.write("\u07e5\u07e9\u07ed\u07f2\u07f4\u07f7\u07fb\u07fe\u0801")
        buf.write("\u0807\u080b\u080f\u0817\u081b\u081f\u0823\u0827\u082b")
        buf.write("\u082f\u0833\u0837\u083b\u083e\u0844\u0848\u084b\u0852")
        buf.write("\u0856\u085b\u0865")
        return buf.getvalue()


class CypherParser ( Parser ):

    grammarFileName = "Cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'='", "'('", "')'", "'['", "']'", 
                     "','", "'+='", "'|'", "'-'", "'*'", "':'", "'..'", 
                     "'+'", "'/'", "'%'", "'^'", "'=~'", "'<>'", "'<'", 
                     "'>'", "'<='", "'>='", "'.'", "'{'", "'}'", "'$'", 
                     "'\u00E2\u0178\u00A8'", "'\u00E3\u20AC\u02C6'", "'\u00EF\u00B9\u00A4'", 
                     "'\u00EF\u00BC\u0153'", "'\u00E2\u0178\u00A9'", "'\u00E3\u20AC\u2030'", 
                     "'\u00EF\u00B9\u00A5'", "'\u00EF\u00BC\u017E'", "'\u00C2\u00AD'", 
                     "'\u00E2\u20AC\u0090'", "'\u00E2\u20AC\u2018'", "'\u00E2\u20AC\u2019'", 
                     "'\u00E2\u20AC\u201C'", "'\u00E2\u20AC\u201D'", "'\u00E2\u20AC\u2022'", 
                     "'\u00E2\u02C6\u2019'", "'\u00EF\u00B9\u02DC'", "'\u00EF\u00B9\u00A3'", 
                     "'\u00EF\u00BC\u008D'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "CYPHER", "EXPLAIN", 
                      "PROFILE", "USING", "PERIODIC", "COMMIT", "UNION", 
                      "ALL", "CREATE", "DROP", "INDEX", "ON", "CONSTRAINT", 
                      "ASSERT", "IS", "UNIQUE", "EXISTS", "LOAD", "CSV", 
                      "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", 
                      "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", 
                      "DELETE", "REMOVE", "FOREACH", "IN", "CALL", "YIELD", 
                      "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", 
                      "ASCENDING", "ASC", "DESCENDING", "DESC", "JOIN", 
                      "SCAN", "START", "NODE", "RELATIONSHIP", "REL", "WHERE", 
                      "SHORTESTPATH", "ALLSHORTESTPATHS", "OR", "XOR", "AND", 
                      "NOT", "STARTS", "ENDS", "CONTAINS", "NULL", "COUNT", 
                      "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", 
                      "FILTER", "EXTRACT", "CASE", "ELSE", "END", "WHEN", 
                      "THEN", "StringLiteral", "EscapedChar", "HexInteger", 
                      "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", 
                      "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", 
                      "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", 
                      "DO", "FOR", "REQUIRE", "MANDATORY", "SCALAR", "OF", 
                      "ADD", "UnescapedSymbolicName", "IdentifierStart", 
                      "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", 
                      "Comment" ]

    RULE_oC_Cypher = 0
    RULE_oC_QueryOptions = 1
    RULE_oC_AnyCypherOption = 2
    RULE_oC_CypherOption = 3
    RULE_oC_VersionNumber = 4
    RULE_oC_Explain = 5
    RULE_oC_Profile = 6
    RULE_oC_ConfigurationOption = 7
    RULE_oC_Statement = 8
    RULE_oC_Query = 9
    RULE_oC_RegularQuery = 10
    RULE_oC_BulkImportQuery = 11
    RULE_oC_PeriodicCommitHint = 12
    RULE_oC_LoadCSVQuery = 13
    RULE_oC_Union = 14
    RULE_oC_SingleQuery = 15
    RULE_oC_SinglePartQuery = 16
    RULE_oC_MultiPartQuery = 17
    RULE_oC_UpdatingClause = 18
    RULE_oC_ReadingClause = 19
    RULE_oC_Command = 20
    RULE_oC_CreateUniqueConstraint = 21
    RULE_oC_CreateNodePropertyExistenceConstraint = 22
    RULE_oC_CreateRelationshipPropertyExistenceConstraint = 23
    RULE_oC_CreateIndex = 24
    RULE_oC_DropUniqueConstraint = 25
    RULE_oC_DropNodePropertyExistenceConstraint = 26
    RULE_oC_DropRelationshipPropertyExistenceConstraint = 27
    RULE_oC_DropIndex = 28
    RULE_oC_Index = 29
    RULE_oC_UniqueConstraint = 30
    RULE_oC_NodePropertyExistenceConstraint = 31
    RULE_oC_RelationshipPropertyExistenceConstraint = 32
    RULE_oC_RelationshipPatternSyntax = 33
    RULE_oC_LoadCSV = 34
    RULE_oC_Match = 35
    RULE_oC_Unwind = 36
    RULE_oC_Merge = 37
    RULE_oC_MergeAction = 38
    RULE_oC_Create = 39
    RULE_oC_CreateUnique = 40
    RULE_oC_Set = 41
    RULE_oC_SetItem = 42
    RULE_oC_Delete = 43
    RULE_oC_Remove = 44
    RULE_oC_RemoveItem = 45
    RULE_oC_Foreach = 46
    RULE_oC_InQueryCall = 47
    RULE_oC_StandaloneCall = 48
    RULE_oC_YieldItems = 49
    RULE_oC_YieldItem = 50
    RULE_oC_With = 51
    RULE_oC_Return = 52
    RULE_oC_ReturnBody = 53
    RULE_oC_ReturnItems = 54
    RULE_oC_ReturnItem = 55
    RULE_oC_Order = 56
    RULE_oC_Skip = 57
    RULE_oC_Limit = 58
    RULE_oC_SortItem = 59
    RULE_oC_Hint = 60
    RULE_oC_Start = 61
    RULE_oC_StartPoint = 62
    RULE_oC_Lookup = 63
    RULE_oC_NodeLookup = 64
    RULE_oC_RelationshipLookup = 65
    RULE_oC_IdentifiedIndexLookup = 66
    RULE_oC_IndexQuery = 67
    RULE_oC_IdLookup = 68
    RULE_oC_LiteralIds = 69
    RULE_oC_Where = 70
    RULE_oC_Pattern = 71
    RULE_oC_PatternPart = 72
    RULE_oC_AnonymousPatternPart = 73
    RULE_oC_ShortestPathPattern = 74
    RULE_oC_PatternElement = 75
    RULE_oC_NodePattern = 76
    RULE_oC_PatternElementChain = 77
    RULE_oC_RelationshipPattern = 78
    RULE_oC_RelationshipDetail = 79
    RULE_oC_Properties = 80
    RULE_oC_RelType = 81
    RULE_oC_RelationshipTypes = 82
    RULE_oC_NodeLabels = 83
    RULE_oC_NodeLabel = 84
    RULE_oC_RangeLiteral = 85
    RULE_oC_LabelName = 86
    RULE_oC_RelTypeName = 87
    RULE_oC_Expression = 88
    RULE_oC_OrExpression = 89
    RULE_oC_XorExpression = 90
    RULE_oC_AndExpression = 91
    RULE_oC_NotExpression = 92
    RULE_oC_ComparisonExpression = 93
    RULE_oC_AddOrSubtractExpression = 94
    RULE_oC_MultiplyDivideModuloExpression = 95
    RULE_oC_PowerOfExpression = 96
    RULE_oC_UnaryAddOrSubtractExpression = 97
    RULE_oC_StringListNullOperatorExpression = 98
    RULE_oC_ListOperatorExpression = 99
    RULE_oC_StringOperatorExpression = 100
    RULE_oC_NullOperatorExpression = 101
    RULE_oC_RegularExpression = 102
    RULE_oC_PropertyOrLabelsExpression = 103
    RULE_oC_Atom = 104
    RULE_oC_Literal = 105
    RULE_oC_BooleanLiteral = 106
    RULE_oC_ListLiteral = 107
    RULE_oC_Reduce = 108
    RULE_oC_PartialComparisonExpression = 109
    RULE_oC_ParenthesizedExpression = 110
    RULE_oC_RelationshipsPattern = 111
    RULE_oC_FilterExpression = 112
    RULE_oC_LegacyListExpression = 113
    RULE_oC_IdInColl = 114
    RULE_oC_FunctionInvocation = 115
    RULE_oC_FunctionName = 116
    RULE_oC_ExplicitProcedureInvocation = 117
    RULE_oC_ImplicitProcedureInvocation = 118
    RULE_oC_ProcedureResultField = 119
    RULE_oC_ProcedureName = 120
    RULE_oC_Namespace = 121
    RULE_oC_ListComprehension = 122
    RULE_oC_PatternComprehension = 123
    RULE_oC_PropertyLookup = 124
    RULE_oC_CaseExpression = 125
    RULE_oC_CaseAlternatives = 126
    RULE_oC_Variable = 127
    RULE_oC_NumberLiteral = 128
    RULE_oC_MapLiteral = 129
    RULE_oC_LegacyParameter = 130
    RULE_oC_Parameter = 131
    RULE_oC_PropertyExpression = 132
    RULE_oC_PropertyKeyName = 133
    RULE_oC_IntegerLiteral = 134
    RULE_oC_DoubleLiteral = 135
    RULE_oC_SchemaName = 136
    RULE_oC_ReservedWord = 137
    RULE_oC_SymbolicName = 138
    RULE_oC_LeftArrowHead = 139
    RULE_oC_RightArrowHead = 140
    RULE_oC_Dash = 141

    ruleNames =  [ "oC_Cypher", "oC_QueryOptions", "oC_AnyCypherOption", 
                   "oC_CypherOption", "oC_VersionNumber", "oC_Explain", 
                   "oC_Profile", "oC_ConfigurationOption", "oC_Statement", 
                   "oC_Query", "oC_RegularQuery", "oC_BulkImportQuery", 
                   "oC_PeriodicCommitHint", "oC_LoadCSVQuery", "oC_Union", 
                   "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_UpdatingClause", "oC_ReadingClause", "oC_Command", 
                   "oC_CreateUniqueConstraint", "oC_CreateNodePropertyExistenceConstraint", 
                   "oC_CreateRelationshipPropertyExistenceConstraint", "oC_CreateIndex", 
                   "oC_DropUniqueConstraint", "oC_DropNodePropertyExistenceConstraint", 
                   "oC_DropRelationshipPropertyExistenceConstraint", "oC_DropIndex", 
                   "oC_Index", "oC_UniqueConstraint", "oC_NodePropertyExistenceConstraint", 
                   "oC_RelationshipPropertyExistenceConstraint", "oC_RelationshipPatternSyntax", 
                   "oC_LoadCSV", "oC_Match", "oC_Unwind", "oC_Merge", "oC_MergeAction", 
                   "oC_Create", "oC_CreateUnique", "oC_Set", "oC_SetItem", 
                   "oC_Delete", "oC_Remove", "oC_RemoveItem", "oC_Foreach", 
                   "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ReturnBody", 
                   "oC_ReturnItems", "oC_ReturnItem", "oC_Order", "oC_Skip", 
                   "oC_Limit", "oC_SortItem", "oC_Hint", "oC_Start", "oC_StartPoint", 
                   "oC_Lookup", "oC_NodeLookup", "oC_RelationshipLookup", 
                   "oC_IdentifiedIndexLookup", "oC_IndexQuery", "oC_IdLookup", 
                   "oC_LiteralIds", "oC_Where", "oC_Pattern", "oC_PatternPart", 
                   "oC_AnonymousPatternPart", "oC_ShortestPathPattern", 
                   "oC_PatternElement", "oC_NodePattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_RelationshipDetail", "oC_Properties", 
                   "oC_RelType", "oC_RelationshipTypes", "oC_NodeLabels", 
                   "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_Expression", "oC_OrExpression", "oC_XorExpression", 
                   "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
                   "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", 
                   "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", 
                   "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
                   "oC_StringOperatorExpression", "oC_NullOperatorExpression", 
                   "oC_RegularExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_Atom", "oC_Literal", "oC_BooleanLiteral", "oC_ListLiteral", 
                   "oC_Reduce", "oC_PartialComparisonExpression", "oC_ParenthesizedExpression", 
                   "oC_RelationshipsPattern", "oC_FilterExpression", "oC_LegacyListExpression", 
                   "oC_IdInColl", "oC_FunctionInvocation", "oC_FunctionName", 
                   "oC_ExplicitProcedureInvocation", "oC_ImplicitProcedureInvocation", 
                   "oC_ProcedureResultField", "oC_ProcedureName", "oC_Namespace", 
                   "oC_ListComprehension", "oC_PatternComprehension", "oC_PropertyLookup", 
                   "oC_CaseExpression", "oC_CaseAlternatives", "oC_Variable", 
                   "oC_NumberLiteral", "oC_MapLiteral", "oC_LegacyParameter", 
                   "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", 
                   "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", 
                   "oC_ReservedWord", "oC_SymbolicName", "oC_LeftArrowHead", 
                   "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    CYPHER=47
    EXPLAIN=48
    PROFILE=49
    USING=50
    PERIODIC=51
    COMMIT=52
    UNION=53
    ALL=54
    CREATE=55
    DROP=56
    INDEX=57
    ON=58
    CONSTRAINT=59
    ASSERT=60
    IS=61
    UNIQUE=62
    EXISTS=63
    LOAD=64
    CSV=65
    WITH=66
    HEADERS=67
    FROM=68
    AS=69
    FIELDTERMINATOR=70
    OPTIONAL=71
    MATCH=72
    UNWIND=73
    MERGE=74
    SET=75
    DETACH=76
    DELETE=77
    REMOVE=78
    FOREACH=79
    IN=80
    CALL=81
    YIELD=82
    DISTINCT=83
    RETURN=84
    ORDER=85
    BY=86
    L_SKIP=87
    LIMIT=88
    ASCENDING=89
    ASC=90
    DESCENDING=91
    DESC=92
    JOIN=93
    SCAN=94
    START=95
    NODE=96
    RELATIONSHIP=97
    REL=98
    WHERE=99
    SHORTESTPATH=100
    ALLSHORTESTPATHS=101
    OR=102
    XOR=103
    AND=104
    NOT=105
    STARTS=106
    ENDS=107
    CONTAINS=108
    NULL=109
    COUNT=110
    ANY=111
    NONE=112
    SINGLE=113
    TRUE=114
    FALSE=115
    REDUCE=116
    FILTER=117
    EXTRACT=118
    CASE=119
    ELSE=120
    END=121
    WHEN=122
    THEN=123
    StringLiteral=124
    EscapedChar=125
    HexInteger=126
    DecimalInteger=127
    OctalInteger=128
    HexLetter=129
    HexDigit=130
    Digit=131
    NonZeroDigit=132
    NonZeroOctDigit=133
    OctDigit=134
    ZeroDigit=135
    ExponentDecimalReal=136
    RegularDecimalReal=137
    DO=138
    FOR=139
    REQUIRE=140
    MANDATORY=141
    SCALAR=142
    OF=143
    ADD=144
    UnescapedSymbolicName=145
    IdentifierStart=146
    IdentifierPart=147
    EscapedSymbolicName=148
    SP=149
    WHITESPACE=150
    Comment=151

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_CypherContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_QueryOptions(self):
            return self.getTypedRuleContext(CypherParser.OC_QueryOptionsContext,0)


        def oC_Statement(self):
            return self.getTypedRuleContext(CypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(CypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = CypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 284
                self.match(CypherParser.SP)


            self.state = 287
            self.oC_QueryOptions()
            self.state = 288
            self.oC_Statement()
            self.state = 293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 289
                    self.match(CypherParser.SP)


                self.state = 292
                self.match(CypherParser.T__0)


            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 295
                self.match(CypherParser.SP)


            self.state = 298
            self.match(CypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QueryOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AnyCypherOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_AnyCypherOptionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_AnyCypherOptionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_QueryOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_QueryOptions" ):
                listener.enterOC_QueryOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_QueryOptions" ):
                listener.exitOC_QueryOptions(self)




    def oC_QueryOptions(self):

        localctx = CypherParser.OC_QueryOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_QueryOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.CYPHER) | (1 << CypherParser.EXPLAIN) | (1 << CypherParser.PROFILE))) != 0):
                self.state = 300
                self.oC_AnyCypherOption()
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 301
                    self.match(CypherParser.SP)


                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnyCypherOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_CypherOption(self):
            return self.getTypedRuleContext(CypherParser.OC_CypherOptionContext,0)


        def oC_Explain(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplainContext,0)


        def oC_Profile(self):
            return self.getTypedRuleContext(CypherParser.OC_ProfileContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_AnyCypherOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnyCypherOption" ):
                listener.enterOC_AnyCypherOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnyCypherOption" ):
                listener.exitOC_AnyCypherOption(self)




    def oC_AnyCypherOption(self):

        localctx = CypherParser.OC_AnyCypherOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_AnyCypherOption)
        try:
            self.state = 312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.CYPHER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 309
                self.oC_CypherOption()
                pass
            elif token in [CypherParser.EXPLAIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 310
                self.oC_Explain()
                pass
            elif token in [CypherParser.PROFILE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 311
                self.oC_Profile()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CYPHER(self):
            return self.getToken(CypherParser.CYPHER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_VersionNumber(self):
            return self.getTypedRuleContext(CypherParser.OC_VersionNumberContext,0)


        def oC_ConfigurationOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ConfigurationOptionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ConfigurationOptionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CypherOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CypherOption" ):
                listener.enterOC_CypherOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CypherOption" ):
                listener.exitOC_CypherOption(self)




    def oC_CypherOption(self):

        localctx = CypherParser.OC_CypherOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_CypherOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(CypherParser.CYPHER)
            self.state = 317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 315
                self.match(CypherParser.SP)
                self.state = 316
                self.oC_VersionNumber()


            self.state = 323
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 319
                    self.match(CypherParser.SP)
                    self.state = 320
                    self.oC_ConfigurationOption() 
                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VersionNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RegularDecimalReal(self):
            return self.getToken(CypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_VersionNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_VersionNumber" ):
                listener.enterOC_VersionNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_VersionNumber" ):
                listener.exitOC_VersionNumber(self)




    def oC_VersionNumber(self):

        localctx = CypherParser.OC_VersionNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_oC_VersionNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(CypherParser.RegularDecimalReal)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(CypherParser.EXPLAIN, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Explain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Explain" ):
                listener.enterOC_Explain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Explain" ):
                listener.exitOC_Explain(self)




    def oC_Explain(self):

        localctx = CypherParser.OC_ExplainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_oC_Explain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(CypherParser.EXPLAIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProfileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROFILE(self):
            return self.getToken(CypherParser.PROFILE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Profile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Profile" ):
                listener.enterOC_Profile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Profile" ):
                listener.exitOC_Profile(self)




    def oC_Profile(self):

        localctx = CypherParser.OC_ProfileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_Profile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(CypherParser.PROFILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ConfigurationOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ConfigurationOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ConfigurationOption" ):
                listener.enterOC_ConfigurationOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ConfigurationOption" ):
                listener.exitOC_ConfigurationOption(self)




    def oC_ConfigurationOption(self):

        localctx = CypherParser.OC_ConfigurationOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_oC_ConfigurationOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.oC_SymbolicName()
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 333
                self.match(CypherParser.SP)


            self.state = 336
            self.match(CypherParser.T__1)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 337
                self.match(CypherParser.SP)


            self.state = 340
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Command(self):
            return self.getTypedRuleContext(CypherParser.OC_CommandContext,0)


        def oC_Query(self):
            return self.getTypedRuleContext(CypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = CypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_Statement)
        try:
            self.state = 344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 342
                self.oC_Command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 343
                self.oC_Query()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(CypherParser.OC_StandaloneCallContext,0)


        def oC_BulkImportQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_BulkImportQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = CypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_oC_Query)
        try:
            self.state = 349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 346
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 347
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 348
                self.oC_BulkImportQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = CypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.oC_SingleQuery()
            self.state = 358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 352
                        self.match(CypherParser.SP)


                    self.state = 355
                    self.oC_Union() 
                self.state = 360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BulkImportQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PeriodicCommitHint(self):
            return self.getTypedRuleContext(CypherParser.OC_PeriodicCommitHintContext,0)


        def oC_LoadCSVQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_LoadCSVQueryContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_BulkImportQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BulkImportQuery" ):
                listener.enterOC_BulkImportQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BulkImportQuery" ):
                listener.exitOC_BulkImportQuery(self)




    def oC_BulkImportQuery(self):

        localctx = CypherParser.OC_BulkImportQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_BulkImportQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.oC_PeriodicCommitHint()
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 362
                self.match(CypherParser.SP)


            self.state = 365
            self.oC_LoadCSVQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PeriodicCommitHintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CypherParser.USING, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def PERIODIC(self):
            return self.getToken(CypherParser.PERIODIC, 0)

        def COMMIT(self):
            return self.getToken(CypherParser.COMMIT, 0)

        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PeriodicCommitHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PeriodicCommitHint" ):
                listener.enterOC_PeriodicCommitHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PeriodicCommitHint" ):
                listener.exitOC_PeriodicCommitHint(self)




    def oC_PeriodicCommitHint(self):

        localctx = CypherParser.OC_PeriodicCommitHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_oC_PeriodicCommitHint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(CypherParser.USING)
            self.state = 368
            self.match(CypherParser.SP)
            self.state = 369
            self.match(CypherParser.PERIODIC)
            self.state = 370
            self.match(CypherParser.SP)
            self.state = 371
            self.match(CypherParser.COMMIT)
            self.state = 374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 372
                self.match(CypherParser.SP)
                self.state = 373
                self.oC_IntegerLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LoadCSVQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LoadCSV(self):
            return self.getTypedRuleContext(CypherParser.OC_LoadCSVContext,0)


        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LoadCSVQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LoadCSVQuery" ):
                listener.enterOC_LoadCSVQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LoadCSVQuery" ):
                listener.exitOC_LoadCSVQuery(self)




    def oC_LoadCSVQuery(self):

        localctx = CypherParser.OC_LoadCSVQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_oC_LoadCSVQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.oC_LoadCSV()
            self.state = 377
            self.oC_SingleQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = CypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 379
                self.match(CypherParser.UNION)
                self.state = 380
                self.match(CypherParser.SP)
                self.state = 381
                self.match(CypherParser.ALL)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 382
                    self.match(CypherParser.SP)


                self.state = 385
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 386
                self.match(CypherParser.UNION)
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 387
                    self.match(CypherParser.SP)


                self.state = 390
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = CypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_SingleQuery)
        try:
            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 393
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 394
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(CypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = CypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CypherParser.LOAD - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.CALL - 64)) | (1 << (CypherParser.START - 64)))) != 0):
                    self.state = 397
                    self.oC_ReadingClause()
                    self.state = 399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 398
                        self.match(CypherParser.SP)


                    self.state = 405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 406
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CypherParser.LOAD - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.CALL - 64)) | (1 << (CypherParser.START - 64)))) != 0):
                    self.state = 407
                    self.oC_ReadingClause()
                    self.state = 409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 408
                        self.match(CypherParser.SP)


                    self.state = 415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 416
                self.oC_UpdatingClause()
                self.state = 423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 418
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 417
                            self.match(CypherParser.SP)


                        self.state = 420
                        self.oC_UpdatingClause() 
                    self.state = 425
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                self.state = 430
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 426
                        self.match(CypherParser.SP)


                    self.state = 429
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_WithContext,i)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = CypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_MultiPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CypherParser.LOAD - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.CALL - 64)) | (1 << (CypherParser.START - 64)))) != 0):
                        self.state = 434
                        self.oC_ReadingClause()
                        self.state = 436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 435
                            self.match(CypherParser.SP)


                        self.state = 442
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CypherParser.CREATE - 55)) | (1 << (CypherParser.MERGE - 55)) | (1 << (CypherParser.SET - 55)) | (1 << (CypherParser.DETACH - 55)) | (1 << (CypherParser.DELETE - 55)) | (1 << (CypherParser.REMOVE - 55)) | (1 << (CypherParser.FOREACH - 55)))) != 0):
                        self.state = 443
                        self.oC_UpdatingClause()
                        self.state = 445
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 444
                            self.match(CypherParser.SP)


                        self.state = 451
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 452
                    self.oC_With()
                    self.state = 454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 453
                        self.match(CypherParser.SP)



                else:
                    raise NoViableAltException(self)
                self.state = 458 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 460
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(CypherParser.OC_MergeContext,0)


        def oC_CreateUnique(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateUniqueContext,0)


        def oC_Foreach(self):
            return self.getTypedRuleContext(CypherParser.OC_ForeachContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(CypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(CypherParser.OC_RemoveContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = CypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_oC_UpdatingClause)
        try:
            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 462
                self.oC_Create()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.oC_Merge()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 464
                self.oC_CreateUnique()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 465
                self.oC_Foreach()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 466
                self.oC_Delete()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 467
                self.oC_Set()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 468
                self.oC_Remove()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LoadCSV(self):
            return self.getTypedRuleContext(CypherParser.OC_LoadCSVContext,0)


        def oC_Start(self):
            return self.getTypedRuleContext(CypherParser.OC_StartContext,0)


        def oC_Match(self):
            return self.getTypedRuleContext(CypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(CypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(CypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = CypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_ReadingClause)
        try:
            self.state = 476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.LOAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 471
                self.oC_LoadCSV()
                pass
            elif token in [CypherParser.START]:
                self.enterOuterAlt(localctx, 2)
                self.state = 472
                self.oC_Start()
                pass
            elif token in [CypherParser.OPTIONAL, CypherParser.MATCH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 473
                self.oC_Match()
                pass
            elif token in [CypherParser.UNWIND]:
                self.enterOuterAlt(localctx, 4)
                self.state = 474
                self.oC_Unwind()
                pass
            elif token in [CypherParser.CALL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 475
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CommandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_CreateIndex(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateIndexContext,0)


        def oC_DropIndex(self):
            return self.getTypedRuleContext(CypherParser.OC_DropIndexContext,0)


        def oC_CreateUniqueConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateUniqueConstraintContext,0)


        def oC_DropUniqueConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_DropUniqueConstraintContext,0)


        def oC_CreateNodePropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateNodePropertyExistenceConstraintContext,0)


        def oC_DropNodePropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_DropNodePropertyExistenceConstraintContext,0)


        def oC_CreateRelationshipPropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateRelationshipPropertyExistenceConstraintContext,0)


        def oC_DropRelationshipPropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_DropRelationshipPropertyExistenceConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Command" ):
                listener.enterOC_Command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Command" ):
                listener.exitOC_Command(self)




    def oC_Command(self):

        localctx = CypherParser.OC_CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_Command)
        try:
            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 478
                self.oC_CreateIndex()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 479
                self.oC_DropIndex()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 480
                self.oC_CreateUniqueConstraint()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 481
                self.oC_DropUniqueConstraint()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 482
                self.oC_CreateNodePropertyExistenceConstraint()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 483
                self.oC_DropNodePropertyExistenceConstraint()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 484
                self.oC_CreateRelationshipPropertyExistenceConstraint()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 485
                self.oC_DropRelationshipPropertyExistenceConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateUniqueConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_UniqueConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_UniqueConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CreateUniqueConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CreateUniqueConstraint" ):
                listener.enterOC_CreateUniqueConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CreateUniqueConstraint" ):
                listener.exitOC_CreateUniqueConstraint(self)




    def oC_CreateUniqueConstraint(self):

        localctx = CypherParser.OC_CreateUniqueConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_CreateUniqueConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(CypherParser.CREATE)
            self.state = 489
            self.match(CypherParser.SP)
            self.state = 490
            self.oC_UniqueConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateNodePropertyExistenceConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_NodePropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePropertyExistenceConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CreateNodePropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CreateNodePropertyExistenceConstraint" ):
                listener.enterOC_CreateNodePropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CreateNodePropertyExistenceConstraint" ):
                listener.exitOC_CreateNodePropertyExistenceConstraint(self)




    def oC_CreateNodePropertyExistenceConstraint(self):

        localctx = CypherParser.OC_CreateNodePropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_CreateNodePropertyExistenceConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(CypherParser.CREATE)
            self.state = 493
            self.match(CypherParser.SP)
            self.state = 494
            self.oC_NodePropertyExistenceConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateRelationshipPropertyExistenceConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_RelationshipPropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPropertyExistenceConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CreateRelationshipPropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CreateRelationshipPropertyExistenceConstraint" ):
                listener.enterOC_CreateRelationshipPropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CreateRelationshipPropertyExistenceConstraint" ):
                listener.exitOC_CreateRelationshipPropertyExistenceConstraint(self)




    def oC_CreateRelationshipPropertyExistenceConstraint(self):

        localctx = CypherParser.OC_CreateRelationshipPropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_oC_CreateRelationshipPropertyExistenceConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(CypherParser.CREATE)
            self.state = 497
            self.match(CypherParser.SP)
            self.state = 498
            self.oC_RelationshipPropertyExistenceConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Index(self):
            return self.getTypedRuleContext(CypherParser.OC_IndexContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CreateIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CreateIndex" ):
                listener.enterOC_CreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CreateIndex" ):
                listener.exitOC_CreateIndex(self)




    def oC_CreateIndex(self):

        localctx = CypherParser.OC_CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_CreateIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(CypherParser.CREATE)
            self.state = 501
            self.match(CypherParser.SP)
            self.state = 502
            self.oC_Index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DropUniqueConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_UniqueConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_UniqueConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_DropUniqueConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DropUniqueConstraint" ):
                listener.enterOC_DropUniqueConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DropUniqueConstraint" ):
                listener.exitOC_DropUniqueConstraint(self)




    def oC_DropUniqueConstraint(self):

        localctx = CypherParser.OC_DropUniqueConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_DropUniqueConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(CypherParser.DROP)
            self.state = 505
            self.match(CypherParser.SP)
            self.state = 506
            self.oC_UniqueConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DropNodePropertyExistenceConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_NodePropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePropertyExistenceConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_DropNodePropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DropNodePropertyExistenceConstraint" ):
                listener.enterOC_DropNodePropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DropNodePropertyExistenceConstraint" ):
                listener.exitOC_DropNodePropertyExistenceConstraint(self)




    def oC_DropNodePropertyExistenceConstraint(self):

        localctx = CypherParser.OC_DropNodePropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_DropNodePropertyExistenceConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(CypherParser.DROP)
            self.state = 509
            self.match(CypherParser.SP)
            self.state = 510
            self.oC_NodePropertyExistenceConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DropRelationshipPropertyExistenceConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_RelationshipPropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPropertyExistenceConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_DropRelationshipPropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DropRelationshipPropertyExistenceConstraint" ):
                listener.enterOC_DropRelationshipPropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DropRelationshipPropertyExistenceConstraint" ):
                listener.exitOC_DropRelationshipPropertyExistenceConstraint(self)




    def oC_DropRelationshipPropertyExistenceConstraint(self):

        localctx = CypherParser.OC_DropRelationshipPropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_DropRelationshipPropertyExistenceConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(CypherParser.DROP)
            self.state = 513
            self.match(CypherParser.SP)
            self.state = 514
            self.oC_RelationshipPropertyExistenceConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DropIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Index(self):
            return self.getTypedRuleContext(CypherParser.OC_IndexContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_DropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DropIndex" ):
                listener.enterOC_DropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DropIndex" ):
                listener.exitOC_DropIndex(self)




    def oC_DropIndex(self):

        localctx = CypherParser.OC_DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_DropIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(CypherParser.DROP)
            self.state = 517
            self.match(CypherParser.SP)
            self.state = 518
            self.oC_Index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def oC_NodeLabel(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Index" ):
                listener.enterOC_Index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Index" ):
                listener.exitOC_Index(self)




    def oC_Index(self):

        localctx = CypherParser.OC_IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_Index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(CypherParser.INDEX)
            self.state = 521
            self.match(CypherParser.SP)
            self.state = 522
            self.match(CypherParser.ON)
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 523
                self.match(CypherParser.SP)


            self.state = 526
            self.oC_NodeLabel()
            self.state = 527
            self.match(CypherParser.T__2)
            self.state = 528
            self.oC_PropertyKeyName()
            self.state = 529
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UniqueConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabel(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,0)


        def ASSERT(self):
            return self.getToken(CypherParser.ASSERT, 0)

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_UniqueConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UniqueConstraint" ):
                listener.enterOC_UniqueConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UniqueConstraint" ):
                listener.exitOC_UniqueConstraint(self)




    def oC_UniqueConstraint(self):

        localctx = CypherParser.OC_UniqueConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_UniqueConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(CypherParser.CONSTRAINT)
            self.state = 532
            self.match(CypherParser.SP)
            self.state = 533
            self.match(CypherParser.ON)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 534
                self.match(CypherParser.SP)


            self.state = 537
            self.match(CypherParser.T__2)
            self.state = 538
            self.oC_Variable()
            self.state = 539
            self.oC_NodeLabel()
            self.state = 540
            self.match(CypherParser.T__3)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 541
                self.match(CypherParser.SP)


            self.state = 544
            self.match(CypherParser.ASSERT)
            self.state = 545
            self.match(CypherParser.SP)
            self.state = 546
            self.oC_PropertyExpression()
            self.state = 547
            self.match(CypherParser.SP)
            self.state = 548
            self.match(CypherParser.IS)
            self.state = 549
            self.match(CypherParser.SP)
            self.state = 550
            self.match(CypherParser.UNIQUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePropertyExistenceConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabel(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,0)


        def ASSERT(self):
            return self.getToken(CypherParser.ASSERT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodePropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePropertyExistenceConstraint" ):
                listener.enterOC_NodePropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePropertyExistenceConstraint" ):
                listener.exitOC_NodePropertyExistenceConstraint(self)




    def oC_NodePropertyExistenceConstraint(self):

        localctx = CypherParser.OC_NodePropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_NodePropertyExistenceConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(CypherParser.CONSTRAINT)
            self.state = 553
            self.match(CypherParser.SP)
            self.state = 554
            self.match(CypherParser.ON)
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 555
                self.match(CypherParser.SP)


            self.state = 558
            self.match(CypherParser.T__2)
            self.state = 559
            self.oC_Variable()
            self.state = 560
            self.oC_NodeLabel()
            self.state = 561
            self.match(CypherParser.T__3)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 562
                self.match(CypherParser.SP)


            self.state = 565
            self.match(CypherParser.ASSERT)
            self.state = 566
            self.match(CypherParser.SP)
            self.state = 567
            self.match(CypherParser.EXISTS)
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 568
                self.match(CypherParser.SP)


            self.state = 571
            self.match(CypherParser.T__2)
            self.state = 572
            self.oC_PropertyExpression()
            self.state = 573
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPropertyExistenceConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def oC_RelationshipPatternSyntax(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPatternSyntaxContext,0)


        def ASSERT(self):
            return self.getToken(CypherParser.ASSERT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipPropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPropertyExistenceConstraint" ):
                listener.enterOC_RelationshipPropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPropertyExistenceConstraint" ):
                listener.exitOC_RelationshipPropertyExistenceConstraint(self)




    def oC_RelationshipPropertyExistenceConstraint(self):

        localctx = CypherParser.OC_RelationshipPropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_RelationshipPropertyExistenceConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(CypherParser.CONSTRAINT)
            self.state = 576
            self.match(CypherParser.SP)
            self.state = 577
            self.match(CypherParser.ON)
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 578
                self.match(CypherParser.SP)


            self.state = 581
            self.oC_RelationshipPatternSyntax()
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 582
                self.match(CypherParser.SP)


            self.state = 585
            self.match(CypherParser.ASSERT)
            self.state = 586
            self.match(CypherParser.SP)
            self.state = 587
            self.match(CypherParser.EXISTS)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 588
                self.match(CypherParser.SP)


            self.state = 591
            self.match(CypherParser.T__2)
            self.state = 592
            self.oC_PropertyExpression()
            self.state = 593
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternSyntaxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_DashContext,i)


        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_RelType(self):
            return self.getTypedRuleContext(CypherParser.OC_RelTypeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_RightArrowHeadContext,0)


        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_LeftArrowHeadContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipPatternSyntax

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPatternSyntax" ):
                listener.enterOC_RelationshipPatternSyntax(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPatternSyntax" ):
                listener.exitOC_RelationshipPatternSyntax(self)




    def oC_RelationshipPatternSyntax(self):

        localctx = CypherParser.OC_RelationshipPatternSyntaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_RelationshipPatternSyntax)
        self._la = 0 # Token type
        try:
            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 595
                self.match(CypherParser.T__2)
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 596
                    self.match(CypherParser.SP)


                self.state = 599
                self.match(CypherParser.T__3)
                self.state = 600
                self.oC_Dash()
                self.state = 601
                self.match(CypherParser.T__4)
                self.state = 602
                self.oC_Variable()
                self.state = 603
                self.oC_RelType()
                self.state = 604
                self.match(CypherParser.T__5)
                self.state = 605
                self.oC_Dash()
                self.state = 606
                self.match(CypherParser.T__2)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 607
                    self.match(CypherParser.SP)


                self.state = 610
                self.match(CypherParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.match(CypherParser.T__2)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 613
                    self.match(CypherParser.SP)


                self.state = 616
                self.match(CypherParser.T__3)
                self.state = 617
                self.oC_Dash()
                self.state = 618
                self.match(CypherParser.T__4)
                self.state = 619
                self.oC_Variable()
                self.state = 620
                self.oC_RelType()
                self.state = 621
                self.match(CypherParser.T__5)
                self.state = 622
                self.oC_Dash()
                self.state = 623
                self.oC_RightArrowHead()
                self.state = 624
                self.match(CypherParser.T__2)
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 625
                    self.match(CypherParser.SP)


                self.state = 628
                self.match(CypherParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 630
                self.match(CypherParser.T__2)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 631
                    self.match(CypherParser.SP)


                self.state = 634
                self.match(CypherParser.T__3)
                self.state = 635
                self.oC_LeftArrowHead()
                self.state = 636
                self.oC_Dash()
                self.state = 637
                self.match(CypherParser.T__4)
                self.state = 638
                self.oC_Variable()
                self.state = 639
                self.oC_RelType()
                self.state = 640
                self.match(CypherParser.T__5)
                self.state = 641
                self.oC_Dash()
                self.state = 642
                self.match(CypherParser.T__2)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 643
                    self.match(CypherParser.SP)


                self.state = 646
                self.match(CypherParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LoadCSVContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(CypherParser.LOAD, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def CSV(self):
            return self.getToken(CypherParser.CSV, 0)

        def FROM(self):
            return self.getToken(CypherParser.FROM, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def HEADERS(self):
            return self.getToken(CypherParser.HEADERS, 0)

        def FIELDTERMINATOR(self):
            return self.getToken(CypherParser.FIELDTERMINATOR, 0)

        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_LoadCSV

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LoadCSV" ):
                listener.enterOC_LoadCSV(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LoadCSV" ):
                listener.exitOC_LoadCSV(self)




    def oC_LoadCSV(self):

        localctx = CypherParser.OC_LoadCSVContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_LoadCSV)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(CypherParser.LOAD)
            self.state = 651
            self.match(CypherParser.SP)
            self.state = 652
            self.match(CypherParser.CSV)
            self.state = 653
            self.match(CypherParser.SP)
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.WITH:
                self.state = 654
                self.match(CypherParser.WITH)
                self.state = 655
                self.match(CypherParser.SP)
                self.state = 656
                self.match(CypherParser.HEADERS)
                self.state = 657
                self.match(CypherParser.SP)


            self.state = 660
            self.match(CypherParser.FROM)
            self.state = 661
            self.match(CypherParser.SP)
            self.state = 662
            self.oC_Expression()
            self.state = 663
            self.match(CypherParser.SP)
            self.state = 664
            self.match(CypherParser.AS)
            self.state = 665
            self.match(CypherParser.SP)
            self.state = 666
            self.oC_Variable()
            self.state = 667
            self.match(CypherParser.SP)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.FIELDTERMINATOR:
                self.state = 668
                self.match(CypherParser.FIELDTERMINATOR)
                self.state = 669
                self.match(CypherParser.SP)
                self.state = 670
                self.match(CypherParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_HintContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_HintContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = CypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.OPTIONAL:
                self.state = 673
                self.match(CypherParser.OPTIONAL)
                self.state = 674
                self.match(CypherParser.SP)


            self.state = 677
            self.match(CypherParser.MATCH)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 678
                self.match(CypherParser.SP)


            self.state = 681
            self.oC_Pattern()
            self.state = 685
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 682
                    self.oC_Hint() 
                self.state = 687
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 688
                    self.match(CypherParser.SP)


                self.state = 691
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = CypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(CypherParser.UNWIND)
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 695
                self.match(CypherParser.SP)


            self.state = 698
            self.oC_Expression()
            self.state = 699
            self.match(CypherParser.SP)
            self.state = 700
            self.match(CypherParser.AS)
            self.state = 701
            self.match(CypherParser.SP)
            self.state = 702
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = CypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(CypherParser.MERGE)
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 705
                self.match(CypherParser.SP)


            self.state = 708
            self.oC_PatternPart()
            self.state = 713
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 709
                    self.match(CypherParser.SP)
                    self.state = 710
                    self.oC_MergeAction() 
                self.state = 715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = CypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_MergeAction)
        try:
            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self.match(CypherParser.ON)
                self.state = 717
                self.match(CypherParser.SP)
                self.state = 718
                self.match(CypherParser.MATCH)
                self.state = 719
                self.match(CypherParser.SP)
                self.state = 720
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.match(CypherParser.ON)
                self.state = 722
                self.match(CypherParser.SP)
                self.state = 723
                self.match(CypherParser.CREATE)
                self.state = 724
                self.match(CypherParser.SP)
                self.state = 725
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = CypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(CypherParser.CREATE)
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 729
                self.match(CypherParser.SP)


            self.state = 732
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateUniqueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CreateUnique

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CreateUnique" ):
                listener.enterOC_CreateUnique(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CreateUnique" ):
                listener.exitOC_CreateUnique(self)




    def oC_CreateUnique(self):

        localctx = CypherParser.OC_CreateUniqueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_CreateUnique)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(CypherParser.CREATE)
            self.state = 735
            self.match(CypherParser.SP)
            self.state = 736
            self.match(CypherParser.UNIQUE)
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 737
                self.match(CypherParser.SP)


            self.state = 740
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SetItemContext,i)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = CypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(CypherParser.SET)
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 743
                self.match(CypherParser.SP)


            self.state = 746
            self.oC_SetItem()
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.T__6:
                self.state = 747
                self.match(CypherParser.T__6)
                self.state = 748
                self.oC_SetItem()
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = CypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                self.oC_PropertyExpression()
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 755
                    self.match(CypherParser.SP)


                self.state = 758
                self.match(CypherParser.T__1)
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 759
                    self.match(CypherParser.SP)


                self.state = 762
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 764
                self.oC_Variable()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 765
                    self.match(CypherParser.SP)


                self.state = 768
                self.match(CypherParser.T__1)
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 769
                    self.match(CypherParser.SP)


                self.state = 772
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 774
                self.oC_Variable()
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 775
                    self.match(CypherParser.SP)


                self.state = 778
                self.match(CypherParser.T__7)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 779
                    self.match(CypherParser.SP)


                self.state = 782
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 784
                self.oC_Variable()
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 785
                    self.match(CypherParser.SP)


                self.state = 788
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = CypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.DETACH:
                self.state = 792
                self.match(CypherParser.DETACH)
                self.state = 793
                self.match(CypherParser.SP)


            self.state = 796
            self.match(CypherParser.DELETE)
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 797
                self.match(CypherParser.SP)


            self.state = 800
            self.oC_Expression()
            self.state = 811
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 801
                        self.match(CypherParser.SP)


                    self.state = 804
                    self.match(CypherParser.T__6)
                    self.state = 806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 805
                        self.match(CypherParser.SP)


                    self.state = 808
                    self.oC_Expression() 
                self.state = 813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = CypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(CypherParser.REMOVE)
            self.state = 815
            self.match(CypherParser.SP)
            self.state = 816
            self.oC_RemoveItem()
            self.state = 827
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 818
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 817
                        self.match(CypherParser.SP)


                    self.state = 820
                    self.match(CypherParser.T__6)
                    self.state = 822
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 821
                        self.match(CypherParser.SP)


                    self.state = 824
                    self.oC_RemoveItem() 
                self.state = 829
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = CypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_RemoveItem)
        try:
            self.state = 834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.oC_Variable()
                self.state = 831
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ForeachContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(CypherParser.FOREACH, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Foreach" ):
                listener.enterOC_Foreach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Foreach" ):
                listener.exitOC_Foreach(self)




    def oC_Foreach(self):

        localctx = CypherParser.OC_ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_Foreach)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(CypherParser.FOREACH)
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 837
                self.match(CypherParser.SP)


            self.state = 840
            self.match(CypherParser.T__2)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 841
                self.match(CypherParser.SP)


            self.state = 844
            self.oC_Variable()
            self.state = 845
            self.match(CypherParser.SP)
            self.state = 846
            self.match(CypherParser.IN)
            self.state = 847
            self.match(CypherParser.SP)
            self.state = 848
            self.oC_Expression()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 849
                self.match(CypherParser.SP)


            self.state = 852
            self.match(CypherParser.T__8)
            self.state = 855 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 853
                    self.match(CypherParser.SP)
                    self.state = 854
                    self.oC_UpdatingClause()

                else:
                    raise NoViableAltException(self)
                self.state = 857 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 859
                self.match(CypherParser.SP)


            self.state = 862
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = CypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(CypherParser.CALL)
            self.state = 865
            self.match(CypherParser.SP)
            self.state = 866
            self.oC_ExplicitProcedureInvocation()
            self.state = 873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 867
                    self.match(CypherParser.SP)


                self.state = 870
                self.match(CypherParser.YIELD)
                self.state = 871
                self.match(CypherParser.SP)
                self.state = 872
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = CypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_StandaloneCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(CypherParser.CALL)
            self.state = 876
            self.match(CypherParser.SP)
            self.state = 879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 877
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 878
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 881
                self.match(CypherParser.SP)
                self.state = 882
                self.match(CypherParser.YIELD)
                self.state = 883
                self.match(CypherParser.SP)
                self.state = 884
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_YieldItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = CypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.state = 902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.oC_YieldItem()
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 889
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 888
                            self.match(CypherParser.SP)


                        self.state = 891
                        self.match(CypherParser.T__6)
                        self.state = 893
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 892
                            self.match(CypherParser.SP)


                        self.state = 895
                        self.oC_YieldItem() 
                    self.state = 900
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                pass
            elif token in [CypherParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 901
                self.match(CypherParser.T__9)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = CypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 904
                self.oC_ProcedureResultField()
                self.state = 905
                self.match(CypherParser.SP)
                self.state = 906
                self.match(CypherParser.AS)
                self.state = 907
                self.match(CypherParser.SP)


            self.state = 911
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ReturnBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ReturnBodyContext,0)


        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = CypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(CypherParser.WITH)
            self.state = 918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 914
                    self.match(CypherParser.SP)


                self.state = 917
                self.match(CypherParser.DISTINCT)


            self.state = 920
            self.match(CypherParser.SP)
            self.state = 921
            self.oC_ReturnBody()
            self.state = 926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 922
                    self.match(CypherParser.SP)


                self.state = 925
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ReturnBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ReturnBodyContext,0)


        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = CypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_Return)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(CypherParser.RETURN)
            self.state = 933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 929
                    self.match(CypherParser.SP)


                self.state = 932
                self.match(CypherParser.DISTINCT)


            self.state = 935
            self.match(CypherParser.SP)
            self.state = 936
            self.oC_ReturnBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ReturnItems(self):
            return self.getTypedRuleContext(CypherParser.OC_ReturnItemsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Order(self):
            return self.getTypedRuleContext(CypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(CypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(CypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReturnBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReturnBody" ):
                listener.enterOC_ReturnBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReturnBody" ):
                listener.exitOC_ReturnBody(self)




    def oC_ReturnBody(self):

        localctx = CypherParser.OC_ReturnBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_ReturnBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.oC_ReturnItems()
            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 939
                self.match(CypherParser.SP)
                self.state = 940
                self.oC_Order()


            self.state = 945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 943
                self.match(CypherParser.SP)
                self.state = 944
                self.oC_Skip()


            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 947
                self.match(CypherParser.SP)
                self.state = 948
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnItemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ReturnItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReturnItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReturnItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReturnItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReturnItems" ):
                listener.enterOC_ReturnItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReturnItems" ):
                listener.exitOC_ReturnItems(self)




    def oC_ReturnItems(self):

        localctx = CypherParser.OC_ReturnItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_ReturnItems)
        self._la = 0 # Token type
        try:
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 951
                self.match(CypherParser.T__10)
                self.state = 962
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 953
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 952
                            self.match(CypherParser.SP)


                        self.state = 955
                        self.match(CypherParser.T__6)
                        self.state = 957
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 956
                            self.match(CypherParser.SP)


                        self.state = 959
                        self.oC_ReturnItem() 
                    self.state = 964
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                pass
            elif token in [CypherParser.T__2, CypherParser.T__4, CypherParser.T__9, CypherParser.T__13, CypherParser.T__24, CypherParser.T__26, CypherParser.ALL, CypherParser.EXISTS, CypherParser.SHORTESTPATH, CypherParser.ALLSHORTESTPATHS, CypherParser.NOT, CypherParser.NULL, CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.TRUE, CypherParser.FALSE, CypherParser.REDUCE, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.CASE, CypherParser.StringLiteral, CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger, CypherParser.HexLetter, CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.oC_ReturnItem()
                self.state = 976
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 967
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 966
                            self.match(CypherParser.SP)


                        self.state = 969
                        self.match(CypherParser.T__6)
                        self.state = 971
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 970
                            self.match(CypherParser.SP)


                        self.state = 973
                        self.oC_ReturnItem() 
                    self.state = 978
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReturnItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReturnItem" ):
                listener.enterOC_ReturnItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReturnItem" ):
                listener.exitOC_ReturnItem(self)




    def oC_ReturnItem(self):

        localctx = CypherParser.OC_ReturnItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_ReturnItem)
        try:
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                self.oC_Expression()
                self.state = 982
                self.match(CypherParser.SP)
                self.state = 983
                self.match(CypherParser.AS)
                self.state = 984
                self.match(CypherParser.SP)
                self.state = 985
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 987
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = CypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(CypherParser.ORDER)
            self.state = 991
            self.match(CypherParser.SP)
            self.state = 992
            self.match(CypherParser.BY)
            self.state = 993
            self.match(CypherParser.SP)
            self.state = 994
            self.oC_SortItem()
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.T__6:
                self.state = 995
                self.match(CypherParser.T__6)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 996
                    self.match(CypherParser.SP)


                self.state = 999
                self.oC_SortItem()
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = CypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(CypherParser.L_SKIP)
            self.state = 1006
            self.match(CypherParser.SP)
            self.state = 1007
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = CypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(CypherParser.LIMIT)
            self.state = 1010
            self.match(CypherParser.SP)
            self.state = 1011
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = CypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.oC_Expression()
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1014
                    self.match(CypherParser.SP)


                self.state = 1017
                _la = self._input.LA(1)
                if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (CypherParser.ASCENDING - 89)) | (1 << (CypherParser.ASC - 89)) | (1 << (CypherParser.DESCENDING - 89)) | (1 << (CypherParser.DESC - 89)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_HintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def USING(self):
            return self.getToken(CypherParser.USING, 0)

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_VariableContext,i)


        def oC_NodeLabel(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,0)


        def JOIN(self):
            return self.getToken(CypherParser.JOIN, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def SCAN(self):
            return self.getToken(CypherParser.SCAN, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Hint" ):
                listener.enterOC_Hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Hint" ):
                listener.exitOC_Hint(self)




    def oC_Hint(self):

        localctx = CypherParser.OC_HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_Hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1020
                self.match(CypherParser.SP)


            self.state = 1060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1023
                self.match(CypherParser.USING)
                self.state = 1024
                self.match(CypherParser.SP)
                self.state = 1025
                self.match(CypherParser.INDEX)
                self.state = 1026
                self.match(CypherParser.SP)
                self.state = 1027
                self.oC_Variable()
                self.state = 1028
                self.oC_NodeLabel()
                self.state = 1029
                self.match(CypherParser.T__2)
                self.state = 1030
                self.oC_PropertyKeyName()
                self.state = 1031
                self.match(CypherParser.T__3)
                pass

            elif la_ == 2:
                self.state = 1033
                self.match(CypherParser.USING)
                self.state = 1034
                self.match(CypherParser.SP)
                self.state = 1035
                self.match(CypherParser.JOIN)
                self.state = 1036
                self.match(CypherParser.SP)
                self.state = 1037
                self.match(CypherParser.ON)
                self.state = 1038
                self.match(CypherParser.SP)
                self.state = 1039
                self.oC_Variable()
                self.state = 1050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1041
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1040
                            self.match(CypherParser.SP)


                        self.state = 1043
                        self.match(CypherParser.T__6)
                        self.state = 1045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1044
                            self.match(CypherParser.SP)


                        self.state = 1047
                        self.oC_Variable() 
                    self.state = 1052
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                pass

            elif la_ == 3:
                self.state = 1053
                self.match(CypherParser.USING)
                self.state = 1054
                self.match(CypherParser.SP)
                self.state = 1055
                self.match(CypherParser.SCAN)
                self.state = 1056
                self.match(CypherParser.SP)
                self.state = 1057
                self.oC_Variable()
                self.state = 1058
                self.oC_NodeLabel()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(CypherParser.START, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_StartPoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_StartPointContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_StartPointContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Start" ):
                listener.enterOC_Start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Start" ):
                listener.exitOC_Start(self)




    def oC_Start(self):

        localctx = CypherParser.OC_StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_Start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(CypherParser.START)
            self.state = 1063
            self.match(CypherParser.SP)
            self.state = 1064
            self.oC_StartPoint()
            self.state = 1075
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1066
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1065
                        self.match(CypherParser.SP)


                    self.state = 1068
                    self.match(CypherParser.T__6)
                    self.state = 1070
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1069
                        self.match(CypherParser.SP)


                    self.state = 1072
                    self.oC_StartPoint() 
                self.state = 1077
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.WHERE:
                self.state = 1078
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StartPointContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_Lookup(self):
            return self.getTypedRuleContext(CypherParser.OC_LookupContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_StartPoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StartPoint" ):
                listener.enterOC_StartPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StartPoint" ):
                listener.exitOC_StartPoint(self)




    def oC_StartPoint(self):

        localctx = CypherParser.OC_StartPointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_StartPoint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.oC_Variable()
            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1082
                self.match(CypherParser.SP)


            self.state = 1085
            self.match(CypherParser.T__1)
            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1086
                self.match(CypherParser.SP)


            self.state = 1089
            self.oC_Lookup()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LookupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLookupContext,0)


        def oC_RelationshipLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipLookupContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Lookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Lookup" ):
                listener.enterOC_Lookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Lookup" ):
                listener.exitOC_Lookup(self)




    def oC_Lookup(self):

        localctx = CypherParser.OC_LookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_Lookup)
        try:
            self.state = 1093
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.oC_NodeLookup()
                pass
            elif token in [CypherParser.RELATIONSHIP, CypherParser.REL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.oC_RelationshipLookup()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLookupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODE(self):
            return self.getToken(CypherParser.NODE, 0)

        def oC_IdentifiedIndexLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_IdentifiedIndexLookupContext,0)


        def oC_IndexQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_IndexQueryContext,0)


        def oC_IdLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_IdLookupContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLookup" ):
                listener.enterOC_NodeLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLookup" ):
                listener.exitOC_NodeLookup(self)




    def oC_NodeLookup(self):

        localctx = CypherParser.OC_NodeLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_NodeLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(CypherParser.NODE)
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1096
                self.match(CypherParser.SP)


            self.state = 1102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1099
                self.oC_IdentifiedIndexLookup()
                pass

            elif la_ == 2:
                self.state = 1100
                self.oC_IndexQuery()
                pass

            elif la_ == 3:
                self.state = 1101
                self.oC_IdLookup()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipLookupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELATIONSHIP(self):
            return self.getToken(CypherParser.RELATIONSHIP, 0)

        def REL(self):
            return self.getToken(CypherParser.REL, 0)

        def oC_IdentifiedIndexLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_IdentifiedIndexLookupContext,0)


        def oC_IndexQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_IndexQueryContext,0)


        def oC_IdLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_IdLookupContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipLookup" ):
                listener.enterOC_RelationshipLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipLookup" ):
                listener.exitOC_RelationshipLookup(self)




    def oC_RelationshipLookup(self):

        localctx = CypherParser.OC_RelationshipLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_RelationshipLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            _la = self._input.LA(1)
            if not(_la==CypherParser.RELATIONSHIP or _la==CypherParser.REL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1105
                self.oC_IdentifiedIndexLookup()
                pass

            elif la_ == 2:
                self.state = 1106
                self.oC_IndexQuery()
                pass

            elif la_ == 3:
                self.state = 1107
                self.oC_IdLookup()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdentifiedIndexLookupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,i)


        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def oC_LegacyParameter(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IdentifiedIndexLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdentifiedIndexLookup" ):
                listener.enterOC_IdentifiedIndexLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdentifiedIndexLookup" ):
                listener.exitOC_IdentifiedIndexLookup(self)




    def oC_IdentifiedIndexLookup(self):

        localctx = CypherParser.OC_IdentifiedIndexLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_IdentifiedIndexLookup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(CypherParser.T__11)
            self.state = 1111
            self.oC_SymbolicName()
            self.state = 1112
            self.match(CypherParser.T__2)
            self.state = 1113
            self.oC_SymbolicName()
            self.state = 1114
            self.match(CypherParser.T__1)
            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.StringLiteral]:
                self.state = 1115
                self.match(CypherParser.StringLiteral)
                pass
            elif token in [CypherParser.T__24]:
                self.state = 1116
                self.oC_LegacyParameter()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1119
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IndexQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def oC_LegacyParameter(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IndexQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IndexQuery" ):
                listener.enterOC_IndexQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IndexQuery" ):
                listener.exitOC_IndexQuery(self)




    def oC_IndexQuery(self):

        localctx = CypherParser.OC_IndexQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_IndexQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(CypherParser.T__11)
            self.state = 1122
            self.oC_SymbolicName()
            self.state = 1123
            self.match(CypherParser.T__2)
            self.state = 1126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.StringLiteral]:
                self.state = 1124
                self.match(CypherParser.StringLiteral)
                pass
            elif token in [CypherParser.T__24]:
                self.state = 1125
                self.oC_LegacyParameter()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1128
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdLookupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LiteralIds(self):
            return self.getTypedRuleContext(CypherParser.OC_LiteralIdsContext,0)


        def oC_LegacyParameter(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IdLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdLookup" ):
                listener.enterOC_IdLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdLookup" ):
                listener.exitOC_IdLookup(self)




    def oC_IdLookup(self):

        localctx = CypherParser.OC_IdLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_IdLookup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(CypherParser.T__2)
            self.state = 1134
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger]:
                self.state = 1131
                self.oC_LiteralIds()
                pass
            elif token in [CypherParser.T__24]:
                self.state = 1132
                self.oC_LegacyParameter()
                pass
            elif token in [CypherParser.T__10]:
                self.state = 1133
                self.match(CypherParser.T__10)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1136
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralIdsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_LiteralIds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LiteralIds" ):
                listener.enterOC_LiteralIds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LiteralIds" ):
                listener.exitOC_LiteralIds(self)




    def oC_LiteralIds(self):

        localctx = CypherParser.OC_LiteralIdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_LiteralIds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.oC_IntegerLiteral()
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.T__6 or _la==CypherParser.SP:
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1139
                    self.match(CypherParser.SP)


                self.state = 1142
                self.match(CypherParser.T__6)
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1143
                    self.match(CypherParser.SP)


                self.state = 1146
                self.oC_IntegerLiteral()
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = CypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(CypherParser.WHERE)
            self.state = 1153
            self.match(CypherParser.SP)
            self.state = 1154
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = CypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.oC_PatternPart()
            self.state = 1167
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1157
                        self.match(CypherParser.SP)


                    self.state = 1160
                    self.match(CypherParser.T__6)
                    self.state = 1162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1161
                        self.match(CypherParser.SP)


                    self.state = 1164
                    self.oC_PatternPart() 
                self.state = 1169
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_AnonymousPatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = CypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 1181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1170
                self.oC_Variable()
                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1171
                    self.match(CypherParser.SP)


                self.state = 1174
                self.match(CypherParser.T__1)
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1175
                    self.match(CypherParser.SP)


                self.state = 1178
                self.oC_AnonymousPatternPart()
                pass
            elif token in [CypherParser.T__2, CypherParser.SHORTESTPATH, CypherParser.ALLSHORTESTPATHS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1180
                self.oC_AnonymousPatternPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ShortestPathPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_ShortestPathPatternContext,0)


        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = CypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_AnonymousPatternPart)
        try:
            self.state = 1185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.SHORTESTPATH, CypherParser.ALLSHORTESTPATHS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1183
                self.oC_ShortestPathPattern()
                pass
            elif token in [CypherParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1184
                self.oC_PatternElement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ShortestPathPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHORTESTPATH(self):
            return self.getToken(CypherParser.SHORTESTPATH, 0)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def ALLSHORTESTPATHS(self):
            return self.getToken(CypherParser.ALLSHORTESTPATHS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ShortestPathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ShortestPathPattern" ):
                listener.enterOC_ShortestPathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ShortestPathPattern" ):
                listener.exitOC_ShortestPathPattern(self)




    def oC_ShortestPathPattern(self):

        localctx = CypherParser.OC_ShortestPathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_ShortestPathPattern)
        try:
            self.state = 1197
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.SHORTESTPATH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1187
                self.match(CypherParser.SHORTESTPATH)
                self.state = 1188
                self.match(CypherParser.T__2)
                self.state = 1189
                self.oC_PatternElement()
                self.state = 1190
                self.match(CypherParser.T__3)
                pass
            elif token in [CypherParser.ALLSHORTESTPATHS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1192
                self.match(CypherParser.ALLSHORTESTPATHS)
                self.state = 1193
                self.match(CypherParser.T__2)
                self.state = 1194
                self.oC_PatternElement()
                self.state = 1195
                self.match(CypherParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = CypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1199
                self.oC_NodePattern()
                self.state = 1206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1201
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1200
                            self.match(CypherParser.SP)


                        self.state = 1203
                        self.oC_PatternElementChain() 
                    self.state = 1208
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.match(CypherParser.T__2)
                self.state = 1210
                self.oC_PatternElement()
                self.state = 1211
                self.match(CypherParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = CypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.match(CypherParser.T__2)
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1216
                self.match(CypherParser.SP)


            self.state = 1223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (CypherParser.COUNT - 110)) | (1 << (CypherParser.ANY - 110)) | (1 << (CypherParser.NONE - 110)) | (1 << (CypherParser.SINGLE - 110)) | (1 << (CypherParser.FILTER - 110)) | (1 << (CypherParser.EXTRACT - 110)) | (1 << (CypherParser.HexLetter - 110)) | (1 << (CypherParser.UnescapedSymbolicName - 110)) | (1 << (CypherParser.EscapedSymbolicName - 110)))) != 0):
                self.state = 1219
                self.oC_Variable()
                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1220
                    self.match(CypherParser.SP)




            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__11:
                self.state = 1225
                self.oC_NodeLabels()
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1226
                    self.match(CypherParser.SP)




            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__24 or _la==CypherParser.T__26:
                self.state = 1231
                self.oC_Properties()
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1232
                    self.match(CypherParser.SP)




            self.state = 1237
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = CypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.oC_RelationshipPattern()
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1240
                self.match(CypherParser.SP)


            self.state = 1243
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = CypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.oC_LeftArrowHead()
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1246
                    self.match(CypherParser.SP)


                self.state = 1249
                self.oC_Dash()
                self.state = 1251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1250
                    self.match(CypherParser.SP)


                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__4:
                    self.state = 1253
                    self.oC_RelationshipDetail()


                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1256
                    self.match(CypherParser.SP)


                self.state = 1259
                self.oC_Dash()
                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1260
                    self.match(CypherParser.SP)


                self.state = 1263
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1265
                self.oC_LeftArrowHead()
                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1266
                    self.match(CypherParser.SP)


                self.state = 1269
                self.oC_Dash()
                self.state = 1271
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1270
                    self.match(CypherParser.SP)


                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__4:
                    self.state = 1273
                    self.oC_RelationshipDetail()


                self.state = 1277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1276
                    self.match(CypherParser.SP)


                self.state = 1279
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1281
                self.oC_Dash()
                self.state = 1283
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1282
                    self.match(CypherParser.SP)


                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__4:
                    self.state = 1285
                    self.oC_RelationshipDetail()


                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1288
                    self.match(CypherParser.SP)


                self.state = 1291
                self.oC_Dash()
                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1292
                    self.match(CypherParser.SP)


                self.state = 1295
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1297
                self.oC_Dash()
                self.state = 1299
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1298
                    self.match(CypherParser.SP)


                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__4:
                    self.state = 1301
                    self.oC_RelationshipDetail()


                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1304
                    self.match(CypherParser.SP)


                self.state = 1307
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_RangeLiteralContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = CypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.match(CypherParser.T__4)
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1312
                self.match(CypherParser.SP)


            self.state = 1319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (CypherParser.COUNT - 110)) | (1 << (CypherParser.ANY - 110)) | (1 << (CypherParser.NONE - 110)) | (1 << (CypherParser.SINGLE - 110)) | (1 << (CypherParser.FILTER - 110)) | (1 << (CypherParser.EXTRACT - 110)) | (1 << (CypherParser.HexLetter - 110)) | (1 << (CypherParser.UnescapedSymbolicName - 110)) | (1 << (CypherParser.EscapedSymbolicName - 110)))) != 0):
                self.state = 1315
                self.oC_Variable()
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1316
                    self.match(CypherParser.SP)




            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__11:
                self.state = 1321
                self.oC_RelationshipTypes()
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1322
                    self.match(CypherParser.SP)




            self.state = 1328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__10:
                self.state = 1327
                self.oC_RangeLiteral()


            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__24 or _la==CypherParser.T__26:
                self.state = 1330
                self.oC_Properties()
                self.state = 1332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1331
                    self.match(CypherParser.SP)




            self.state = 1336
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def oC_LegacyParameter(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = CypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_Properties)
        try:
            self.state = 1341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1338
                self.oC_MapLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1339
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1340
                self.oC_LegacyParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self):
            return self.getTypedRuleContext(CypherParser.OC_RelTypeNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelType" ):
                listener.enterOC_RelType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelType" ):
                listener.exitOC_RelType(self)




    def oC_RelType(self):

        localctx = CypherParser.OC_RelTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_RelType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self.match(CypherParser.T__11)
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1344
                self.match(CypherParser.SP)


            self.state = 1347
            self.oC_RelTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = CypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.match(CypherParser.T__11)
            self.state = 1351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1350
                self.match(CypherParser.SP)


            self.state = 1353
            self.oC_RelTypeName()
            self.state = 1367
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1354
                        self.match(CypherParser.SP)


                    self.state = 1357
                    self.match(CypherParser.T__8)
                    self.state = 1359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.T__11:
                        self.state = 1358
                        self.match(CypherParser.T__11)


                    self.state = 1362
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1361
                        self.match(CypherParser.SP)


                    self.state = 1364
                    self.oC_RelTypeName() 
                self.state = 1369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = CypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self.oC_NodeLabel()
            self.state = 1377
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1371
                        self.match(CypherParser.SP)


                    self.state = 1374
                    self.oC_NodeLabel() 
                self.state = 1379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(CypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = CypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.match(CypherParser.T__11)
            self.state = 1382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1381
                self.match(CypherParser.SP)


            self.state = 1384
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = CypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1386
            self.match(CypherParser.T__10)
            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1387
                self.match(CypherParser.SP)


            self.state = 1394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (CypherParser.HexInteger - 126)) | (1 << (CypherParser.DecimalInteger - 126)) | (1 << (CypherParser.OctalInteger - 126)))) != 0):
                self.state = 1390
                self.oC_IntegerLiteral()
                self.state = 1392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1391
                    self.match(CypherParser.SP)




            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__12:
                self.state = 1396
                self.match(CypherParser.T__12)
                self.state = 1398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1397
                    self.match(CypherParser.SP)


                self.state = 1404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (CypherParser.HexInteger - 126)) | (1 << (CypherParser.DecimalInteger - 126)) | (1 << (CypherParser.OctalInteger - 126)))) != 0):
                    self.state = 1400
                    self.oC_IntegerLiteral()
                    self.state = 1402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1401
                        self.match(CypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = CypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = CypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = CypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.OR)
            else:
                return self.getToken(CypherParser.OR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = CypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.oC_XorExpression()
            self.state = 1421
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1415
                    self.match(CypherParser.SP)
                    self.state = 1416
                    self.match(CypherParser.OR)
                    self.state = 1417
                    self.match(CypherParser.SP)
                    self.state = 1418
                    self.oC_XorExpression() 
                self.state = 1423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.XOR)
            else:
                return self.getToken(CypherParser.XOR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = CypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.oC_AndExpression()
            self.state = 1431
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1425
                    self.match(CypherParser.SP)
                    self.state = 1426
                    self.match(CypherParser.XOR)
                    self.state = 1427
                    self.match(CypherParser.SP)
                    self.state = 1428
                    self.oC_AndExpression() 
                self.state = 1433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.AND)
            else:
                return self.getToken(CypherParser.AND, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = CypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.oC_NotExpression()
            self.state = 1441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1435
                    self.match(CypherParser.SP)
                    self.state = 1436
                    self.match(CypherParser.AND)
                    self.state = 1437
                    self.match(CypherParser.SP)
                    self.state = 1438
                    self.oC_NotExpression() 
                self.state = 1443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.NOT)
            else:
                return self.getToken(CypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = CypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.NOT:
                self.state = 1444
                self.match(CypherParser.NOT)
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1445
                    self.match(CypherParser.SP)


                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1453
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = CypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.oC_AddOrSubtractExpression()
            self.state = 1462
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1456
                        self.match(CypherParser.SP)


                    self.state = 1459
                    self.oC_PartialComparisonExpression() 
                self.state = 1464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = CypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1484
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1482
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                    if la_ == 1:
                        self.state = 1467
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1466
                            self.match(CypherParser.SP)


                        self.state = 1469
                        self.match(CypherParser.T__13)
                        self.state = 1471
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1470
                            self.match(CypherParser.SP)


                        self.state = 1473
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1475
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1474
                            self.match(CypherParser.SP)


                        self.state = 1477
                        self.match(CypherParser.T__9)
                        self.state = 1479
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1478
                            self.match(CypherParser.SP)


                        self.state = 1481
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = CypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.oC_PowerOfExpression()
            self.state = 1514
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1512
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                    if la_ == 1:
                        self.state = 1489
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1488
                            self.match(CypherParser.SP)


                        self.state = 1491
                        self.match(CypherParser.T__10)
                        self.state = 1493
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1492
                            self.match(CypherParser.SP)


                        self.state = 1495
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1497
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1496
                            self.match(CypherParser.SP)


                        self.state = 1499
                        self.match(CypherParser.T__14)
                        self.state = 1501
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1500
                            self.match(CypherParser.SP)


                        self.state = 1503
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1505
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1504
                            self.match(CypherParser.SP)


                        self.state = 1507
                        self.match(CypherParser.T__15)
                        self.state = 1509
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1508
                            self.match(CypherParser.SP)


                        self.state = 1511
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = CypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1528
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1518
                        self.match(CypherParser.SP)


                    self.state = 1521
                    self.match(CypherParser.T__16)
                    self.state = 1523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1522
                        self.match(CypherParser.SP)


                    self.state = 1525
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1530
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullOperatorExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_StringListNullOperatorExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = CypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.T__9 or _la==CypherParser.T__13:
                self.state = 1531
                _la = self._input.LA(1)
                if not(_la==CypherParser.T__9 or _la==CypherParser.T__13):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1532
                    self.match(CypherParser.SP)


                self.state = 1539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1540
            self.oC_StringListNullOperatorExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def oC_StringOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_StringOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_StringOperatorExpressionContext,i)


        def oC_ListOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ListOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ListOperatorExpressionContext,i)


        def oC_NullOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NullOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NullOperatorExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringListNullOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullOperatorExpression" ):
                listener.enterOC_StringListNullOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullOperatorExpression" ):
                listener.exitOC_StringListNullOperatorExpression(self)




    def oC_StringListNullOperatorExpression(self):

        localctx = CypherParser.OC_StringListNullOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_StringListNullOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.oC_PropertyOrLabelsExpression()
            self.state = 1548
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1546
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                    if la_ == 1:
                        self.state = 1543
                        self.oC_StringOperatorExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1544
                        self.oC_ListOperatorExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1545
                        self.oC_NullOperatorExpression()
                        pass

             
                self.state = 1550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = CypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_ListOperatorExpression)
        self._la = 0 # Token type
        try:
            self.state = 1576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1551
                self.match(CypherParser.SP)
                self.state = 1552
                self.match(CypherParser.IN)
                self.state = 1554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1553
                    self.match(CypherParser.SP)


                self.state = 1556
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1557
                    self.match(CypherParser.SP)


                self.state = 1560
                self.match(CypherParser.T__4)
                self.state = 1561
                self.oC_Expression()
                self.state = 1562
                self.match(CypherParser.T__5)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1564
                    self.match(CypherParser.SP)


                self.state = 1567
                self.match(CypherParser.T__4)
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__13) | (1 << CypherParser.T__24) | (1 << CypherParser.T__26) | (1 << CypherParser.ALL) | (1 << CypherParser.EXISTS))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (CypherParser.SHORTESTPATH - 100)) | (1 << (CypherParser.ALLSHORTESTPATHS - 100)) | (1 << (CypherParser.NOT - 100)) | (1 << (CypherParser.NULL - 100)) | (1 << (CypherParser.COUNT - 100)) | (1 << (CypherParser.ANY - 100)) | (1 << (CypherParser.NONE - 100)) | (1 << (CypherParser.SINGLE - 100)) | (1 << (CypherParser.TRUE - 100)) | (1 << (CypherParser.FALSE - 100)) | (1 << (CypherParser.REDUCE - 100)) | (1 << (CypherParser.FILTER - 100)) | (1 << (CypherParser.EXTRACT - 100)) | (1 << (CypherParser.CASE - 100)) | (1 << (CypherParser.StringLiteral - 100)) | (1 << (CypherParser.HexInteger - 100)) | (1 << (CypherParser.DecimalInteger - 100)) | (1 << (CypherParser.OctalInteger - 100)) | (1 << (CypherParser.HexLetter - 100)) | (1 << (CypherParser.ExponentDecimalReal - 100)) | (1 << (CypherParser.RegularDecimalReal - 100)) | (1 << (CypherParser.UnescapedSymbolicName - 100)) | (1 << (CypherParser.EscapedSymbolicName - 100)))) != 0):
                    self.state = 1568
                    self.oC_Expression()


                self.state = 1571
                self.match(CypherParser.T__12)
                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__13) | (1 << CypherParser.T__24) | (1 << CypherParser.T__26) | (1 << CypherParser.ALL) | (1 << CypherParser.EXISTS))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (CypherParser.SHORTESTPATH - 100)) | (1 << (CypherParser.ALLSHORTESTPATHS - 100)) | (1 << (CypherParser.NOT - 100)) | (1 << (CypherParser.NULL - 100)) | (1 << (CypherParser.COUNT - 100)) | (1 << (CypherParser.ANY - 100)) | (1 << (CypherParser.NONE - 100)) | (1 << (CypherParser.SINGLE - 100)) | (1 << (CypherParser.TRUE - 100)) | (1 << (CypherParser.FALSE - 100)) | (1 << (CypherParser.REDUCE - 100)) | (1 << (CypherParser.FILTER - 100)) | (1 << (CypherParser.EXTRACT - 100)) | (1 << (CypherParser.CASE - 100)) | (1 << (CypherParser.StringLiteral - 100)) | (1 << (CypherParser.HexInteger - 100)) | (1 << (CypherParser.DecimalInteger - 100)) | (1 << (CypherParser.OctalInteger - 100)) | (1 << (CypherParser.HexLetter - 100)) | (1 << (CypherParser.ExponentDecimalReal - 100)) | (1 << (CypherParser.RegularDecimalReal - 100)) | (1 << (CypherParser.UnescapedSymbolicName - 100)) | (1 << (CypherParser.EscapedSymbolicName - 100)))) != 0):
                    self.state = 1572
                    self.oC_Expression()


                self.state = 1575
                self.match(CypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def oC_RegularExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringOperatorExpression" ):
                listener.enterOC_StringOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringOperatorExpression" ):
                listener.exitOC_StringOperatorExpression(self)




    def oC_StringOperatorExpression(self):

        localctx = CypherParser.OC_StringOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_StringOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.state = 1578
                self.oC_RegularExpression()
                pass

            elif la_ == 2:
                self.state = 1579
                self.match(CypherParser.SP)
                self.state = 1580
                self.match(CypherParser.STARTS)
                self.state = 1581
                self.match(CypherParser.SP)
                self.state = 1582
                self.match(CypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1583
                self.match(CypherParser.SP)
                self.state = 1584
                self.match(CypherParser.ENDS)
                self.state = 1585
                self.match(CypherParser.SP)
                self.state = 1586
                self.match(CypherParser.WITH)
                pass

            elif la_ == 4:
                self.state = 1587
                self.match(CypherParser.SP)
                self.state = 1588
                self.match(CypherParser.CONTAINS)
                pass


            self.state = 1592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1591
                self.match(CypherParser.SP)


            self.state = 1594
            self.oC_PropertyOrLabelsExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NullOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullOperatorExpression" ):
                listener.enterOC_NullOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullOperatorExpression" ):
                listener.exitOC_NullOperatorExpression(self)




    def oC_NullOperatorExpression(self):

        localctx = CypherParser.OC_NullOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_NullOperatorExpression)
        try:
            self.state = 1606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1596
                self.match(CypherParser.SP)
                self.state = 1597
                self.match(CypherParser.IS)
                self.state = 1598
                self.match(CypherParser.SP)
                self.state = 1599
                self.match(CypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1600
                self.match(CypherParser.SP)
                self.state = 1601
                self.match(CypherParser.IS)
                self.state = 1602
                self.match(CypherParser.SP)
                self.state = 1603
                self.match(CypherParser.NOT)
                self.state = 1604
                self.match(CypherParser.SP)
                self.state = 1605
                self.match(CypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RegularExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularExpression" ):
                listener.enterOC_RegularExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularExpression" ):
                listener.exitOC_RegularExpression(self)




    def oC_RegularExpression(self):

        localctx = CypherParser.OC_RegularExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_RegularExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1608
                self.match(CypherParser.SP)


            self.state = 1611
            self.match(CypherParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = CypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            self.oC_Atom()
            self.state = 1620
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1614
                        self.match(CypherParser.SP)


                    self.state = 1617
                    self.oC_PropertyLookup() 
                self.state = 1622
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1623
                    self.match(CypherParser.SP)


                self.state = 1626
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(CypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def oC_LegacyParameter(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternComprehensionContext,0)


        def oC_LegacyListExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyListExpressionContext,0)


        def oC_Reduce(self):
            return self.getTypedRuleContext(CypherParser.OC_ReduceContext,0)


        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def oC_ShortestPathPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_ShortestPathPatternContext,0)


        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionInvocationContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = CypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1629
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1630
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1631
                self.oC_LegacyParameter()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1632
                self.oC_CaseExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1633
                self.match(CypherParser.COUNT)
                self.state = 1635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1634
                    self.match(CypherParser.SP)


                self.state = 1637
                self.match(CypherParser.T__2)
                self.state = 1639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1638
                    self.match(CypherParser.SP)


                self.state = 1641
                self.match(CypherParser.T__10)
                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1642
                    self.match(CypherParser.SP)


                self.state = 1645
                self.match(CypherParser.T__3)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1646
                self.oC_ListComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1647
                self.oC_PatternComprehension()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1648
                self.oC_LegacyListExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1649
                self.oC_Reduce()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1650
                self.match(CypherParser.ALL)
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1651
                    self.match(CypherParser.SP)


                self.state = 1654
                self.match(CypherParser.T__2)
                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1655
                    self.match(CypherParser.SP)


                self.state = 1658
                self.oC_FilterExpression()
                self.state = 1660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1659
                    self.match(CypherParser.SP)


                self.state = 1662
                self.match(CypherParser.T__3)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1664
                self.match(CypherParser.ANY)
                self.state = 1666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1665
                    self.match(CypherParser.SP)


                self.state = 1668
                self.match(CypherParser.T__2)
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1669
                    self.match(CypherParser.SP)


                self.state = 1672
                self.oC_FilterExpression()
                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1673
                    self.match(CypherParser.SP)


                self.state = 1676
                self.match(CypherParser.T__3)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1678
                self.match(CypherParser.NONE)
                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1679
                    self.match(CypherParser.SP)


                self.state = 1682
                self.match(CypherParser.T__2)
                self.state = 1684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1683
                    self.match(CypherParser.SP)


                self.state = 1686
                self.oC_FilterExpression()
                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1687
                    self.match(CypherParser.SP)


                self.state = 1690
                self.match(CypherParser.T__3)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1692
                self.match(CypherParser.SINGLE)
                self.state = 1694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1693
                    self.match(CypherParser.SP)


                self.state = 1696
                self.match(CypherParser.T__2)
                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1697
                    self.match(CypherParser.SP)


                self.state = 1700
                self.oC_FilterExpression()
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1701
                    self.match(CypherParser.SP)


                self.state = 1704
                self.match(CypherParser.T__3)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1706
                self.oC_ShortestPathPattern()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1707
                self.oC_RelationshipsPattern()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1708
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1709
                self.oC_FunctionInvocation()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1710
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def oC_ListLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_ListLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = CypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_Literal)
        try:
            self.state = 1719
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger, CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1713
                self.oC_NumberLiteral()
                pass
            elif token in [CypherParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1714
                self.match(CypherParser.StringLiteral)
                pass
            elif token in [CypherParser.TRUE, CypherParser.FALSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1715
                self.oC_BooleanLiteral()
                pass
            elif token in [CypherParser.NULL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1716
                self.match(CypherParser.NULL)
                pass
            elif token in [CypherParser.T__24]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1717
                self.oC_MapLiteral()
                pass
            elif token in [CypherParser.T__4]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1718
                self.oC_ListLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = CypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            _la = self._input.LA(1)
            if not(_la==CypherParser.TRUE or _la==CypherParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = CypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self.match(CypherParser.T__4)
            self.state = 1725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1724
                self.match(CypherParser.SP)


            self.state = 1744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__13) | (1 << CypherParser.T__24) | (1 << CypherParser.T__26) | (1 << CypherParser.ALL) | (1 << CypherParser.EXISTS))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (CypherParser.SHORTESTPATH - 100)) | (1 << (CypherParser.ALLSHORTESTPATHS - 100)) | (1 << (CypherParser.NOT - 100)) | (1 << (CypherParser.NULL - 100)) | (1 << (CypherParser.COUNT - 100)) | (1 << (CypherParser.ANY - 100)) | (1 << (CypherParser.NONE - 100)) | (1 << (CypherParser.SINGLE - 100)) | (1 << (CypherParser.TRUE - 100)) | (1 << (CypherParser.FALSE - 100)) | (1 << (CypherParser.REDUCE - 100)) | (1 << (CypherParser.FILTER - 100)) | (1 << (CypherParser.EXTRACT - 100)) | (1 << (CypherParser.CASE - 100)) | (1 << (CypherParser.StringLiteral - 100)) | (1 << (CypherParser.HexInteger - 100)) | (1 << (CypherParser.DecimalInteger - 100)) | (1 << (CypherParser.OctalInteger - 100)) | (1 << (CypherParser.HexLetter - 100)) | (1 << (CypherParser.ExponentDecimalReal - 100)) | (1 << (CypherParser.RegularDecimalReal - 100)) | (1 << (CypherParser.UnescapedSymbolicName - 100)) | (1 << (CypherParser.EscapedSymbolicName - 100)))) != 0):
                self.state = 1727
                self.oC_Expression()
                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1728
                    self.match(CypherParser.SP)


                self.state = 1741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__6:
                    self.state = 1731
                    self.match(CypherParser.T__6)
                    self.state = 1733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1732
                        self.match(CypherParser.SP)


                    self.state = 1735
                    self.oC_Expression()
                    self.state = 1737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1736
                        self.match(CypherParser.SP)


                    self.state = 1743
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1746
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReduceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDUCE(self):
            return self.getToken(CypherParser.REDUCE, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def oC_IdInColl(self):
            return self.getTypedRuleContext(CypherParser.OC_IdInCollContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Reduce

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Reduce" ):
                listener.enterOC_Reduce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Reduce" ):
                listener.exitOC_Reduce(self)




    def oC_Reduce(self):

        localctx = CypherParser.OC_ReduceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_Reduce)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self.match(CypherParser.REDUCE)
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1749
                self.match(CypherParser.SP)


            self.state = 1752
            self.match(CypherParser.T__2)
            self.state = 1753
            self.oC_Variable()
            self.state = 1754
            self.match(CypherParser.T__1)
            self.state = 1755
            self.oC_Expression()
            self.state = 1756
            self.match(CypherParser.T__6)
            self.state = 1757
            self.oC_IdInColl()
            self.state = 1758
            self.match(CypherParser.T__8)
            self.state = 1759
            self.oC_Expression()
            self.state = 1760
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = CypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1792
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1762
                self.match(CypherParser.T__1)
                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1763
                    self.match(CypherParser.SP)


                self.state = 1766
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [CypherParser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1767
                self.match(CypherParser.T__18)
                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1768
                    self.match(CypherParser.SP)


                self.state = 1771
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [CypherParser.T__19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1772
                self.match(CypherParser.T__19)
                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1773
                    self.match(CypherParser.SP)


                self.state = 1776
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [CypherParser.T__20]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1777
                self.match(CypherParser.T__20)
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1778
                    self.match(CypherParser.SP)


                self.state = 1781
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [CypherParser.T__21]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1782
                self.match(CypherParser.T__21)
                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1783
                    self.match(CypherParser.SP)


                self.state = 1786
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [CypherParser.T__22]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1787
                self.match(CypherParser.T__22)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1788
                    self.match(CypherParser.SP)


                self.state = 1791
                self.oC_AddOrSubtractExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = CypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1794
            self.match(CypherParser.T__2)
            self.state = 1796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1795
                self.match(CypherParser.SP)


            self.state = 1798
            self.oC_Expression()
            self.state = 1800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1799
                self.match(CypherParser.SP)


            self.state = 1802
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = CypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.oC_NodePattern()
            self.state = 1809 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1805
                        self.match(CypherParser.SP)


                    self.state = 1808
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1811 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(CypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = CypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.oC_IdInColl()
            self.state = 1818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1814
                    self.match(CypherParser.SP)


                self.state = 1817
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LegacyListExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(CypherParser.FILTER, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def EXTRACT(self):
            return self.getToken(CypherParser.EXTRACT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LegacyListExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LegacyListExpression" ):
                listener.enterOC_LegacyListExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LegacyListExpression" ):
                listener.exitOC_LegacyListExpression(self)




    def oC_LegacyListExpression(self):

        localctx = CypherParser.OC_LegacyListExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_LegacyListExpression)
        self._la = 0 # Token type
        try:
            self.state = 1855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.FILTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1820
                self.match(CypherParser.FILTER)
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1821
                    self.match(CypherParser.SP)


                self.state = 1824
                self.match(CypherParser.T__2)
                self.state = 1826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1825
                    self.match(CypherParser.SP)


                self.state = 1828
                self.oC_FilterExpression()
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1829
                    self.match(CypherParser.SP)


                self.state = 1832
                self.match(CypherParser.T__3)
                pass
            elif token in [CypherParser.EXTRACT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1834
                self.match(CypherParser.EXTRACT)
                self.state = 1836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1835
                    self.match(CypherParser.SP)


                self.state = 1838
                self.match(CypherParser.T__2)
                self.state = 1840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1839
                    self.match(CypherParser.SP)


                self.state = 1842
                self.oC_FilterExpression()
                self.state = 1844
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                if la_ == 1:
                    self.state = 1843
                    self.match(CypherParser.SP)


                self.state = 1851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__8 or _la==CypherParser.SP:
                    self.state = 1847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1846
                        self.match(CypherParser.SP)


                    self.state = 1849
                    self.match(CypherParser.T__8)
                    self.state = 1850
                    self.oC_Expression()


                self.state = 1853
                self.match(CypherParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = CypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            self.oC_Variable()
            self.state = 1858
            self.match(CypherParser.SP)
            self.state = 1859
            self.match(CypherParser.IN)
            self.state = 1860
            self.match(CypherParser.SP)
            self.state = 1861
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = CypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self.oC_FunctionName()
            self.state = 1865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1864
                self.match(CypherParser.SP)


            self.state = 1867
            self.match(CypherParser.T__2)
            self.state = 1869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1868
                self.match(CypherParser.SP)


            self.state = 1875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.DISTINCT:
                self.state = 1871
                self.match(CypherParser.DISTINCT)
                self.state = 1873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1872
                    self.match(CypherParser.SP)




            self.state = 1894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__13) | (1 << CypherParser.T__24) | (1 << CypherParser.T__26) | (1 << CypherParser.ALL) | (1 << CypherParser.EXISTS))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (CypherParser.SHORTESTPATH - 100)) | (1 << (CypherParser.ALLSHORTESTPATHS - 100)) | (1 << (CypherParser.NOT - 100)) | (1 << (CypherParser.NULL - 100)) | (1 << (CypherParser.COUNT - 100)) | (1 << (CypherParser.ANY - 100)) | (1 << (CypherParser.NONE - 100)) | (1 << (CypherParser.SINGLE - 100)) | (1 << (CypherParser.TRUE - 100)) | (1 << (CypherParser.FALSE - 100)) | (1 << (CypherParser.REDUCE - 100)) | (1 << (CypherParser.FILTER - 100)) | (1 << (CypherParser.EXTRACT - 100)) | (1 << (CypherParser.CASE - 100)) | (1 << (CypherParser.StringLiteral - 100)) | (1 << (CypherParser.HexInteger - 100)) | (1 << (CypherParser.DecimalInteger - 100)) | (1 << (CypherParser.OctalInteger - 100)) | (1 << (CypherParser.HexLetter - 100)) | (1 << (CypherParser.ExponentDecimalReal - 100)) | (1 << (CypherParser.RegularDecimalReal - 100)) | (1 << (CypherParser.UnescapedSymbolicName - 100)) | (1 << (CypherParser.EscapedSymbolicName - 100)))) != 0):
                self.state = 1877
                self.oC_Expression()
                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1878
                    self.match(CypherParser.SP)


                self.state = 1891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__6:
                    self.state = 1881
                    self.match(CypherParser.T__6)
                    self.state = 1883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1882
                        self.match(CypherParser.SP)


                    self.state = 1885
                    self.oC_Expression()
                    self.state = 1887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1886
                        self.match(CypherParser.SP)


                    self.state = 1893
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1896
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = CypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_FunctionName)
        try:
            self.state = 1902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1898
                self.oC_Namespace()
                self.state = 1899
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.EXISTS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1901
                self.match(CypherParser.EXISTS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.oC_ProcedureName()
            self.state = 1906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1905
                self.match(CypherParser.SP)


            self.state = 1908
            self.match(CypherParser.T__2)
            self.state = 1910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1909
                self.match(CypherParser.SP)


            self.state = 1929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__13) | (1 << CypherParser.T__24) | (1 << CypherParser.T__26) | (1 << CypherParser.ALL) | (1 << CypherParser.EXISTS))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (CypherParser.SHORTESTPATH - 100)) | (1 << (CypherParser.ALLSHORTESTPATHS - 100)) | (1 << (CypherParser.NOT - 100)) | (1 << (CypherParser.NULL - 100)) | (1 << (CypherParser.COUNT - 100)) | (1 << (CypherParser.ANY - 100)) | (1 << (CypherParser.NONE - 100)) | (1 << (CypherParser.SINGLE - 100)) | (1 << (CypherParser.TRUE - 100)) | (1 << (CypherParser.FALSE - 100)) | (1 << (CypherParser.REDUCE - 100)) | (1 << (CypherParser.FILTER - 100)) | (1 << (CypherParser.EXTRACT - 100)) | (1 << (CypherParser.CASE - 100)) | (1 << (CypherParser.StringLiteral - 100)) | (1 << (CypherParser.HexInteger - 100)) | (1 << (CypherParser.DecimalInteger - 100)) | (1 << (CypherParser.OctalInteger - 100)) | (1 << (CypherParser.HexLetter - 100)) | (1 << (CypherParser.ExponentDecimalReal - 100)) | (1 << (CypherParser.RegularDecimalReal - 100)) | (1 << (CypherParser.UnescapedSymbolicName - 100)) | (1 << (CypherParser.EscapedSymbolicName - 100)))) != 0):
                self.state = 1912
                self.oC_Expression()
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1913
                    self.match(CypherParser.SP)


                self.state = 1926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__6:
                    self.state = 1916
                    self.match(CypherParser.T__6)
                    self.state = 1918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1917
                        self.match(CypherParser.SP)


                    self.state = 1920
                    self.oC_Expression()
                    self.state = 1922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1921
                        self.match(CypherParser.SP)


                    self.state = 1928
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1931
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = CypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = CypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self.oC_Namespace()
            self.state = 1938
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = CypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1945
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1940
                    self.oC_SymbolicName()
                    self.state = 1941
                    self.match(CypherParser.T__23) 
                self.state = 1947
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = CypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self.match(CypherParser.T__4)
            self.state = 1950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1949
                self.match(CypherParser.SP)


            self.state = 1952
            self.oC_FilterExpression()
            self.state = 1961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1953
                    self.match(CypherParser.SP)


                self.state = 1956
                self.match(CypherParser.T__8)
                self.state = 1958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1957
                    self.match(CypherParser.SP)


                self.state = 1960
                self.oC_Expression()


            self.state = 1964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1963
                self.match(CypherParser.SP)


            self.state = 1966
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = CypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1968
            self.match(CypherParser.T__4)
            self.state = 1970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1969
                self.match(CypherParser.SP)


            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (CypherParser.COUNT - 110)) | (1 << (CypherParser.ANY - 110)) | (1 << (CypherParser.NONE - 110)) | (1 << (CypherParser.SINGLE - 110)) | (1 << (CypherParser.FILTER - 110)) | (1 << (CypherParser.EXTRACT - 110)) | (1 << (CypherParser.HexLetter - 110)) | (1 << (CypherParser.UnescapedSymbolicName - 110)) | (1 << (CypherParser.EscapedSymbolicName - 110)))) != 0):
                self.state = 1972
                self.oC_Variable()
                self.state = 1974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1973
                    self.match(CypherParser.SP)


                self.state = 1976
                self.match(CypherParser.T__1)
                self.state = 1978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1977
                    self.match(CypherParser.SP)




            self.state = 1982
            self.oC_RelationshipsPattern()
            self.state = 1984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1983
                self.match(CypherParser.SP)


            self.state = 1994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.WHERE:
                self.state = 1986
                self.match(CypherParser.WHERE)
                self.state = 1988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1987
                    self.match(CypherParser.SP)


                self.state = 1990
                self.oC_Expression()
                self.state = 1992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1991
                    self.match(CypherParser.SP)




            self.state = 1996
            self.match(CypherParser.T__8)
            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1997
                self.match(CypherParser.SP)


            self.state = 2000
            self.oC_Expression()
            self.state = 2002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2001
                self.match(CypherParser.SP)


            self.state = 2004
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = CypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            self.match(CypherParser.T__23)
            self.state = 2008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2007
                self.match(CypherParser.SP)


            self.state = 2010
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def oC_CaseAlternatives(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_CaseAlternativesContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_CaseAlternativesContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = CypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2012
                self.match(CypherParser.CASE)
                self.state = 2017 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2014
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 2013
                            self.match(CypherParser.SP)


                        self.state = 2016
                        self.oC_CaseAlternatives()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2019 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,327,self._ctx)

                pass

            elif la_ == 2:
                self.state = 2021
                self.match(CypherParser.CASE)
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 2022
                    self.match(CypherParser.SP)


                self.state = 2025
                self.oC_Expression()
                self.state = 2030 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2027
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 2026
                            self.match(CypherParser.SP)


                        self.state = 2029
                        self.oC_CaseAlternatives()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2032 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,330,self._ctx)

                pass


            self.state = 2044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 2037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 2036
                    self.match(CypherParser.SP)


                self.state = 2039
                self.match(CypherParser.ELSE)
                self.state = 2041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 2040
                    self.match(CypherParser.SP)


                self.state = 2043
                self.oC_Expression()


            self.state = 2047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2046
                self.match(CypherParser.SP)


            self.state = 2049
            self.match(CypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseAlternatives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternatives" ):
                listener.enterOC_CaseAlternatives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternatives" ):
                listener.exitOC_CaseAlternatives(self)




    def oC_CaseAlternatives(self):

        localctx = CypherParser.OC_CaseAlternativesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_CaseAlternatives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2051
            self.match(CypherParser.WHEN)
            self.state = 2053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2052
                self.match(CypherParser.SP)


            self.state = 2055
            self.oC_Expression()
            self.state = 2057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2056
                self.match(CypherParser.SP)


            self.state = 2059
            self.match(CypherParser.THEN)
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2060
                self.match(CypherParser.SP)


            self.state = 2063
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = CypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = CypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2069
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2067
                self.oC_DoubleLiteral()
                pass
            elif token in [CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2068
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = CypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.match(CypherParser.T__24)
            self.state = 2073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2072
                self.match(CypherParser.SP)


            self.state = 2108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (CypherParser.UNION - 53)) | (1 << (CypherParser.ALL - 53)) | (1 << (CypherParser.CREATE - 53)) | (1 << (CypherParser.DROP - 53)) | (1 << (CypherParser.ON - 53)) | (1 << (CypherParser.CONSTRAINT - 53)) | (1 << (CypherParser.IS - 53)) | (1 << (CypherParser.UNIQUE - 53)) | (1 << (CypherParser.EXISTS - 53)) | (1 << (CypherParser.WITH - 53)) | (1 << (CypherParser.AS - 53)) | (1 << (CypherParser.OPTIONAL - 53)) | (1 << (CypherParser.MATCH - 53)) | (1 << (CypherParser.UNWIND - 53)) | (1 << (CypherParser.MERGE - 53)) | (1 << (CypherParser.SET - 53)) | (1 << (CypherParser.DETACH - 53)) | (1 << (CypherParser.DELETE - 53)) | (1 << (CypherParser.REMOVE - 53)) | (1 << (CypherParser.IN - 53)) | (1 << (CypherParser.DISTINCT - 53)) | (1 << (CypherParser.RETURN - 53)) | (1 << (CypherParser.ORDER - 53)) | (1 << (CypherParser.BY - 53)) | (1 << (CypherParser.L_SKIP - 53)) | (1 << (CypherParser.LIMIT - 53)) | (1 << (CypherParser.ASCENDING - 53)) | (1 << (CypherParser.ASC - 53)) | (1 << (CypherParser.DESCENDING - 53)) | (1 << (CypherParser.DESC - 53)) | (1 << (CypherParser.WHERE - 53)) | (1 << (CypherParser.OR - 53)) | (1 << (CypherParser.XOR - 53)) | (1 << (CypherParser.AND - 53)) | (1 << (CypherParser.NOT - 53)) | (1 << (CypherParser.STARTS - 53)) | (1 << (CypherParser.ENDS - 53)) | (1 << (CypherParser.CONTAINS - 53)) | (1 << (CypherParser.NULL - 53)) | (1 << (CypherParser.COUNT - 53)) | (1 << (CypherParser.ANY - 53)) | (1 << (CypherParser.NONE - 53)) | (1 << (CypherParser.SINGLE - 53)) | (1 << (CypherParser.TRUE - 53)) | (1 << (CypherParser.FALSE - 53)))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (CypherParser.FILTER - 117)) | (1 << (CypherParser.EXTRACT - 117)) | (1 << (CypherParser.CASE - 117)) | (1 << (CypherParser.ELSE - 117)) | (1 << (CypherParser.END - 117)) | (1 << (CypherParser.WHEN - 117)) | (1 << (CypherParser.THEN - 117)) | (1 << (CypherParser.HexLetter - 117)) | (1 << (CypherParser.DO - 117)) | (1 << (CypherParser.FOR - 117)) | (1 << (CypherParser.REQUIRE - 117)) | (1 << (CypherParser.MANDATORY - 117)) | (1 << (CypherParser.SCALAR - 117)) | (1 << (CypherParser.OF - 117)) | (1 << (CypherParser.ADD - 117)) | (1 << (CypherParser.UnescapedSymbolicName - 117)) | (1 << (CypherParser.EscapedSymbolicName - 117)))) != 0):
                self.state = 2075
                self.oC_PropertyKeyName()
                self.state = 2077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 2076
                    self.match(CypherParser.SP)


                self.state = 2079
                self.match(CypherParser.T__11)
                self.state = 2081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 2080
                    self.match(CypherParser.SP)


                self.state = 2083
                self.oC_Expression()
                self.state = 2085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 2084
                    self.match(CypherParser.SP)


                self.state = 2105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__6:
                    self.state = 2087
                    self.match(CypherParser.T__6)
                    self.state = 2089
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2088
                        self.match(CypherParser.SP)


                    self.state = 2091
                    self.oC_PropertyKeyName()
                    self.state = 2093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2092
                        self.match(CypherParser.SP)


                    self.state = 2095
                    self.match(CypherParser.T__11)
                    self.state = 2097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2096
                        self.match(CypherParser.SP)


                    self.state = 2099
                    self.oC_Expression()
                    self.state = 2101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2100
                        self.match(CypherParser.SP)


                    self.state = 2107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2110
            self.match(CypherParser.T__25)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LegacyParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_LegacyParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LegacyParameter" ):
                listener.enterOC_LegacyParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LegacyParameter" ):
                listener.exitOC_LegacyParameter(self)




    def oC_LegacyParameter(self):

        localctx = CypherParser.OC_LegacyParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_LegacyParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2112
            self.match(CypherParser.T__24)
            self.state = 2114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2113
                self.match(CypherParser.SP)


            self.state = 2118
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.state = 2116
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.DecimalInteger]:
                self.state = 2117
                self.match(CypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2120
                self.match(CypherParser.SP)


            self.state = 2123
            self.match(CypherParser.T__25)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = CypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2125
            self.match(CypherParser.T__26)
            self.state = 2128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.state = 2126
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.DecimalInteger]:
                self.state = 2127
                self.match(CypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = CypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            self.oC_Atom()
            self.state = 2135 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2131
                        self.match(CypherParser.SP)


                    self.state = 2134
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 2137 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,355,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = CypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(CypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(CypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = CypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2141
            _la = self._input.LA(1)
            if not(((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & ((1 << (CypherParser.HexInteger - 126)) | (1 << (CypherParser.DecimalInteger - 126)) | (1 << (CypherParser.OctalInteger - 126)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(CypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(CypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = CypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            _la = self._input.LA(1)
            if not(_la==CypherParser.ExponentDecimalReal or _la==CypherParser.RegularDecimalReal):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(CypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = CypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_SchemaName)
        try:
            self.state = 2147
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2145
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.UNION, CypherParser.ALL, CypherParser.CREATE, CypherParser.DROP, CypherParser.ON, CypherParser.CONSTRAINT, CypherParser.IS, CypherParser.UNIQUE, CypherParser.EXISTS, CypherParser.WITH, CypherParser.AS, CypherParser.OPTIONAL, CypherParser.MATCH, CypherParser.UNWIND, CypherParser.MERGE, CypherParser.SET, CypherParser.DETACH, CypherParser.DELETE, CypherParser.REMOVE, CypherParser.IN, CypherParser.DISTINCT, CypherParser.RETURN, CypherParser.ORDER, CypherParser.BY, CypherParser.L_SKIP, CypherParser.LIMIT, CypherParser.ASCENDING, CypherParser.ASC, CypherParser.DESCENDING, CypherParser.DESC, CypherParser.WHERE, CypherParser.OR, CypherParser.XOR, CypherParser.AND, CypherParser.NOT, CypherParser.STARTS, CypherParser.ENDS, CypherParser.CONTAINS, CypherParser.NULL, CypherParser.TRUE, CypherParser.FALSE, CypherParser.CASE, CypherParser.ELSE, CypherParser.END, CypherParser.WHEN, CypherParser.THEN, CypherParser.DO, CypherParser.FOR, CypherParser.REQUIRE, CypherParser.MANDATORY, CypherParser.SCALAR, CypherParser.OF, CypherParser.ADD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2146
                self.oC_ReservedWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(CypherParser.AND, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def OR(self):
            return self.getToken(CypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(CypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(CypherParser.DO, 0)

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(CypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(CypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(CypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(CypherParser.OF, 0)

        def ADD(self):
            return self.getToken(CypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = CypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2149
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (CypherParser.UNION - 53)) | (1 << (CypherParser.ALL - 53)) | (1 << (CypherParser.CREATE - 53)) | (1 << (CypherParser.DROP - 53)) | (1 << (CypherParser.ON - 53)) | (1 << (CypherParser.CONSTRAINT - 53)) | (1 << (CypherParser.IS - 53)) | (1 << (CypherParser.UNIQUE - 53)) | (1 << (CypherParser.EXISTS - 53)) | (1 << (CypherParser.WITH - 53)) | (1 << (CypherParser.AS - 53)) | (1 << (CypherParser.OPTIONAL - 53)) | (1 << (CypherParser.MATCH - 53)) | (1 << (CypherParser.UNWIND - 53)) | (1 << (CypherParser.MERGE - 53)) | (1 << (CypherParser.SET - 53)) | (1 << (CypherParser.DETACH - 53)) | (1 << (CypherParser.DELETE - 53)) | (1 << (CypherParser.REMOVE - 53)) | (1 << (CypherParser.IN - 53)) | (1 << (CypherParser.DISTINCT - 53)) | (1 << (CypherParser.RETURN - 53)) | (1 << (CypherParser.ORDER - 53)) | (1 << (CypherParser.BY - 53)) | (1 << (CypherParser.L_SKIP - 53)) | (1 << (CypherParser.LIMIT - 53)) | (1 << (CypherParser.ASCENDING - 53)) | (1 << (CypherParser.ASC - 53)) | (1 << (CypherParser.DESCENDING - 53)) | (1 << (CypherParser.DESC - 53)) | (1 << (CypherParser.WHERE - 53)) | (1 << (CypherParser.OR - 53)) | (1 << (CypherParser.XOR - 53)) | (1 << (CypherParser.AND - 53)) | (1 << (CypherParser.NOT - 53)) | (1 << (CypherParser.STARTS - 53)) | (1 << (CypherParser.ENDS - 53)) | (1 << (CypherParser.CONTAINS - 53)) | (1 << (CypherParser.NULL - 53)) | (1 << (CypherParser.TRUE - 53)) | (1 << (CypherParser.FALSE - 53)))) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & ((1 << (CypherParser.CASE - 119)) | (1 << (CypherParser.ELSE - 119)) | (1 << (CypherParser.END - 119)) | (1 << (CypherParser.WHEN - 119)) | (1 << (CypherParser.THEN - 119)) | (1 << (CypherParser.DO - 119)) | (1 << (CypherParser.FOR - 119)) | (1 << (CypherParser.REQUIRE - 119)) | (1 << (CypherParser.MANDATORY - 119)) | (1 << (CypherParser.SCALAR - 119)) | (1 << (CypherParser.OF - 119)) | (1 << (CypherParser.ADD - 119)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(CypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(CypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(CypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(CypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(CypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = CypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            _la = self._input.LA(1)
            if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (CypherParser.COUNT - 110)) | (1 << (CypherParser.ANY - 110)) | (1 << (CypherParser.NONE - 110)) | (1 << (CypherParser.SINGLE - 110)) | (1 << (CypherParser.FILTER - 110)) | (1 << (CypherParser.EXTRACT - 110)) | (1 << (CypherParser.HexLetter - 110)) | (1 << (CypherParser.UnescapedSymbolicName - 110)) | (1 << (CypherParser.EscapedSymbolicName - 110)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = CypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__19) | (1 << CypherParser.T__27) | (1 << CypherParser.T__28) | (1 << CypherParser.T__29) | (1 << CypherParser.T__30))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = CypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__20) | (1 << CypherParser.T__31) | (1 << CypherParser.T__32) | (1 << CypherParser.T__33) | (1 << CypherParser.T__34))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = CypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2157
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__9) | (1 << CypherParser.T__35) | (1 << CypherParser.T__36) | (1 << CypherParser.T__37) | (1 << CypherParser.T__38) | (1 << CypherParser.T__39) | (1 << CypherParser.T__40) | (1 << CypherParser.T__41) | (1 << CypherParser.T__42) | (1 << CypherParser.T__43) | (1 << CypherParser.T__44) | (1 << CypherParser.T__45))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





